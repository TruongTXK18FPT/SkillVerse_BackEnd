package com.exe.skillverse_backend.shared.config;

import com.exe.skillverse_backend.auth_service.entity.PrimaryRole;
import com.exe.skillverse_backend.auth_service.entity.Role;
import com.exe.skillverse_backend.auth_service.entity.User;
import com.exe.skillverse_backend.auth_service.entity.UserStatus;
import com.exe.skillverse_backend.auth_service.repository.RoleRepository;
import com.exe.skillverse_backend.auth_service.repository.UserRepository;
import com.exe.skillverse_backend.mentor_service.entity.ApplicationStatus;
import com.exe.skillverse_backend.mentor_service.entity.MentorProfile;
import com.exe.skillverse_backend.mentor_service.repository.MentorProfileRepository;
import com.exe.skillverse_backend.business_service.entity.RecruiterProfile;
import com.exe.skillverse_backend.business_service.repository.RecruiterProfileRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.Set;

@Component
@RequiredArgsConstructor
@Slf4j
public class DataInitializer implements CommandLineRunner {

    private final RoleRepository roleRepository;
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final MentorProfileRepository mentorProfileRepository;
    private final RecruiterProfileRepository recruiterProfileRepository;

    @PersistenceContext
    private EntityManager entityManager;

    @Override
    public void run(String... args) throws Exception {
        initializeRoles();
        initializeUsersAndProfiles(); // Combined initialization
    }

    private void initializeRoles() {
        try {
            // Create USER role if it doesn't exist
            if (!roleRepository.existsByName("USER")) {
                Role userRole = new Role();
                userRole.setName("USER");
                roleRepository.save(userRole);
                log.info("‚úÖ Created USER role");
            } else {
                log.info("‚úÖ USER role already exists");
            }

            // Create ADMIN role if it doesn't exist
            if (!roleRepository.existsByName("ADMIN")) {
                Role adminRole = new Role();
                adminRole.setName("ADMIN");
                roleRepository.save(adminRole);
                log.info("‚úÖ Created ADMIN role");
            } else {
                log.info("‚úÖ ADMIN role already exists");
            }

            // Create MENTOR role if it doesn't exist
            if (!roleRepository.existsByName("MENTOR")) {
                Role mentorRole = new Role();
                mentorRole.setName("MENTOR");
                roleRepository.save(mentorRole);
                log.info("‚úÖ Created MENTOR role");
            } else {
                log.info("‚úÖ MENTOR role already exists");
            }

            // Create RECRUITER role if it doesn't exist
            if (!roleRepository.existsByName("RECRUITER")) {
                Role recruiterRole = new Role();
                recruiterRole.setName("RECRUITER");
                roleRepository.save(recruiterRole);
                log.info("‚úÖ Created RECRUITER role");
            } else {
                log.info("‚úÖ RECRUITER role already exists");
            }

            log.info("üéâ All roles initialized successfully");

        } catch (Exception e) {
            log.error("‚ùå Error initializing roles: {}", e.getMessage(), e);
            throw new RuntimeException("Failed to initialize roles", e);
        }
    }

    @Transactional
    private void initializeUsersAndProfiles() {
        try {
            // Initialize roles first
            Role userRole = roleRepository.findByName("USER").orElseThrow();
            Role adminRole = roleRepository.findByName("ADMIN").orElseThrow();
            Role mentorRole = roleRepository.findByName("MENTOR").orElseThrow();
            Role recruiterRole = roleRepository.findByName("RECRUITER").orElseThrow();

            // Create admin user (ACTIVE and verified)
            User adminUser = createUserIfNotExists("exeadmin@gmail.com", "Password123!", Set.of(adminRole), "Admin User",
                    PrimaryRole.ADMIN, UserStatus.ACTIVE);

            // Create mentor user (ACTIVE but needs approval through mentor profile)
            User mentorUser = createUserIfNotExists("exementor@gmail.com", "Password123!", Set.of(mentorRole), "Mentor User",
                    PrimaryRole.MENTOR, UserStatus.ACTIVE);

            // Create recruiter user (ACTIVE but needs approval through recruiter profile)
            User recruiterUser = createUserIfNotExists("exerecruiter@gmail.com", "Password123!", Set.of(recruiterRole), "Recruiter User",
                    PrimaryRole.RECRUITER, UserStatus.ACTIVE);

            // Create regular user (ACTIVE after email verification)
            User regularUser = createUserIfNotExists("exeuser@gmail.com", "Password123!", Set.of(userRole), "Regular User",
                    PrimaryRole.USER, UserStatus.ACTIVE);

            log.info("üéâ All test users initialized successfully");

            // Create mentor profile if mentor user was created
            if (mentorUser != null && !mentorProfileRepository.existsByUserId(mentorUser.getId())) {
                MentorProfile mentorProfile = MentorProfile.builder()
                        .user(mentorUser)
                        .fullName("Test Mentor")
                        .email("exementor@gmail.com")
                        .linkedinProfile("https://linkedin.com/in/test-mentor")
                        .mainExpertiseAreas("Java, Spring Boot, Microservices")
                        .yearsOfExperience(5)
                        .personalProfile("Experienced software developer with 5+ years in backend development")
                        .cvPortfolioUrl("https://portfolio.test-mentor.com")
                        .certificatesUrl("https://certificates.test-mentor.com")
                        .applicationStatus(ApplicationStatus.PENDING)
                        .applicationDate(LocalDateTime.now())
                        .build();

                mentorProfileRepository.save(mentorProfile);
                log.info("‚úÖ Created MentorProfile for test mentor user");
            }

            // Create recruiter profile if recruiter user was created
            if (recruiterUser != null && !recruiterProfileRepository.existsByUserId(recruiterUser.getId())) {
                RecruiterProfile recruiterProfile = RecruiterProfile.builder()
                        .user(recruiterUser)
                        .companyName("Test Company Inc")
                        .companyEmail("contact@testcompany.com")
                        .companyWebsite("https://www.testcompany.com")
                        .companyAddress("123 Tech Street, District 1, Ho Chi Minh City, Vietnam")
                        .taxCodeOrBusinessRegistrationNumber("0123456789")
                        .companyDocumentsUrl("https://storage.testcompany.com/business-license.pdf")
                        .applicationStatus(ApplicationStatus.PENDING)
                        .applicationDate(LocalDateTime.now())
                        .build();

                recruiterProfileRepository.save(recruiterProfile);
                log.info("‚úÖ Created RecruiterProfile for test recruiter user");
            }

            log.info("üéâ All test profiles initialized successfully");

        } catch (Exception e) {
            log.error("‚ùå Error initializing users and profiles: {}", e.getMessage(), e);
            throw new RuntimeException("Failed to initialize users and profiles", e);
        }
    }

    private User createUserIfNotExists(String email, String password, Set<Role> roles, String description,
            PrimaryRole primaryRole, UserStatus userStatus) {
        if (!userRepository.existsByEmail(email)) {
            User user = User.builder()
                    .email(email)
                    .password(passwordEncoder.encode(password))
                    .status(userStatus)
                    .isEmailVerified(true)
                    .roles(roles)
                    .primaryRole(primaryRole)
                    .createdAt(LocalDateTime.now())
                    .updatedAt(LocalDateTime.now())
                    .build();

            User savedUser = userRepository.save(user);
            log.info("‚úÖ Created {} with email: {} and primary role: {}", description, email, primaryRole);
            return savedUser;
        } else {
            // User exists, but check if roles and status are correct
            User existingUser = userRepository.findByEmail(email).orElse(null);
            if (existingUser != null) {
                boolean needsUpdate = false;

                // Check and fix primary role
                if (existingUser.getPrimaryRole() != primaryRole) {
                    existingUser.setPrimaryRole(primaryRole);
                    needsUpdate = true;
                    log.info("üîß Updating primary role for {}: {} -> {}", email, existingUser.getPrimaryRole(),
                            primaryRole);
                }

                // Check and fix user status
                if (existingUser.getStatus() != userStatus) {
                    existingUser.setStatus(userStatus);
                    needsUpdate = true;
                    log.info("üîß Updating user status for {}: {} -> {}", email, existingUser.getStatus(),
                            userStatus);
                }

                // Check and fix roles
                Set<String> currentRoleNames = existingUser.getRoles().stream()
                        .map(Role::getName)
                        .collect(java.util.stream.Collectors.toSet());
                Set<String> expectedRoleNames = roles.stream()
                        .map(Role::getName)
                        .collect(java.util.stream.Collectors.toSet());

                if (!currentRoleNames.equals(expectedRoleNames)) {
                    existingUser.setRoles(roles);
                    needsUpdate = true;
                    log.info("üîß Updating roles for {}: {} -> {}", email, currentRoleNames, expectedRoleNames);
                }

                if (needsUpdate) {
                    existingUser.setUpdatedAt(LocalDateTime.now());
                    userRepository.save(existingUser);
                    log.info("‚úÖ Updated {} with email: {} and corrected roles/status", description, email);
                } else {
                    log.info("‚úÖ {} already exists with correct configuration: {}", description, email);
                }
                return existingUser;
            }
            return null; // In case existingUser is null
        }
    }

}
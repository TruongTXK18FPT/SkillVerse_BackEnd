package com.exe.skillverse_backend.shared.config;

import java.math.BigDecimal;
import java.time.Instant;
import java.time.LocalDateTime;
import java.util.Set;

import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import com.exe.skillverse_backend.auth_service.entity.Role;
import com.exe.skillverse_backend.auth_service.entity.User;
import com.exe.skillverse_backend.auth_service.repository.RoleRepository;
import com.exe.skillverse_backend.auth_service.repository.UserRepository;
import com.exe.skillverse_backend.auth_service.entity.PrimaryRole;
import com.exe.skillverse_backend.auth_service.entity.UserStatus;
import com.exe.skillverse_backend.premium_service.entity.PremiumPlan;
import com.exe.skillverse_backend.premium_service.repository.PremiumPlanRepository;
import com.exe.skillverse_backend.course_service.entity.*;
import com.exe.skillverse_backend.course_service.entity.enums.*;
import com.exe.skillverse_backend.course_service.repository.*;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
@RequiredArgsConstructor
public class DataInitializer implements CommandLineRunner {

    private final RoleRepository roleRepository;
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final PremiumPlanRepository premiumPlanRepository;
    private final CourseRepository courseRepository;
    private final ModuleRepository moduleRepository;
    private final LessonRepository lessonRepository;
    private final QuizRepository quizRepository;
    private final AssignmentRepository assignmentRepository;

    @Override
    public void run(String... args) throws Exception {
        initializeRoles();
        initializeUsers();
        initializePremiumPlans();
        initializeCourses();
        // initializeProfiles(); // Temporarily disabled - profiles can be created via
        // API
    }

    private void initializeRoles() {
        try {
            // Create USER role if it doesn't exist
            if (!roleRepository.existsByName("USER")) {
                Role userRole = new Role();
                userRole.setName("USER");
                roleRepository.save(userRole);
                log.info("‚úÖ Created USER role");
            }

            // Create ADMIN role if it doesn't exist
            if (!roleRepository.existsByName("ADMIN")) {
                Role adminRole = new Role();
                adminRole.setName("ADMIN");
                roleRepository.save(adminRole);
                log.info("‚úÖ Created ADMIN role");
            }

            // Create MENTOR role if it doesn't exist
            if (!roleRepository.existsByName("MENTOR")) {
                Role mentorRole = new Role();
                mentorRole.setName("MENTOR");
                roleRepository.save(mentorRole);
                log.info("‚úÖ Created MENTOR role");
            }

            // Create RECRUITER role if it doesn't exist
            if (!roleRepository.existsByName("RECRUITER")) {
                Role recruiterRole = new Role();
                recruiterRole.setName("RECRUITER");
                roleRepository.save(recruiterRole);
                log.info("‚úÖ Created RECRUITER role");
            }

            log.info("üéâ All roles initialized successfully");

        } catch (Exception e) {
            log.error("‚ùå Error initializing roles: {}", e.getMessage(), e);
            throw new RuntimeException("Failed to initialize roles", e);
        }
    }

    private void initializeUsers() {
        try {
            // Get roles first
            Role userRole = roleRepository.findByName("USER")
                    .orElseThrow(() -> new RuntimeException("USER role not found"));
            Role adminRole = roleRepository.findByName("ADMIN")
                    .orElseThrow(() -> new RuntimeException("ADMIN role not found"));
            Role mentorRole = roleRepository.findByName("MENTOR")
                    .orElseThrow(() -> new RuntimeException("MENTOR role not found"));
            Role recruiterRole = roleRepository.findByName("RECRUITER")
                    .orElseThrow(() -> new RuntimeException("RECRUITER role not found"));

            // Create admin user (admin role with ADMIN primary role)
            createUserIfNotExists("exeadmin@gmail.com", "Password123!", Set.of(adminRole), "Admin User",
                    PrimaryRole.ADMIN, UserStatus.ACTIVE);

            // Create mentor user (ACTIVE for testing - normally would be INACTIVE until
            // approved)
            createUserIfNotExists("exementor@gmail.com", "Password123!", Set.of(mentorRole), "Mentor User",
                    PrimaryRole.MENTOR, UserStatus.ACTIVE);

            // Create recruiter user (ACTIVE for testing - normally would be INACTIVE until
            // approved)
            createUserIfNotExists("exerecruiter@gmail.com", "Password123!", Set.of(recruiterRole), "Recruiter User",
                    PrimaryRole.RECRUITER, UserStatus.ACTIVE);

            // Create regular user (ACTIVE after email verification)
            createUserIfNotExists("exeuser@gmail.com", "Password123!", Set.of(userRole), "Regular User",
                    PrimaryRole.USER, UserStatus.ACTIVE);

            log.info("üéâ All test users initialized successfully");

        } catch (Exception e) {
            log.error("‚ùå Error initializing users: {}", e.getMessage(), e);
            throw new RuntimeException("Failed to initialize users", e);
        }
    }

    private void initializePremiumPlans() {
        try {
            // Create FREE_TIER plan (permanent)
            createPremiumPlanIfNotExists(
                    "free_tier",
                    "Free Tier",
                    "G√≥i mi·ªÖn ph√≠ v·ªõi quy·ªÅn truy c·∫≠p c∆° b·∫£n",
                    Integer.MAX_VALUE, // Permanent
                    new BigDecimal("0"),
                    PremiumPlan.PlanType.FREE_TIER,
                    new BigDecimal("0"),
                    "[\"Truy c·∫≠p c∆° b·∫£n\", \"Tham gia c·ªông ƒë·ªìng\"]");

            // Create PREMIUM_BASIC plan
            createPremiumPlanIfNotExists(
                    "premium_basic",
                    "Premium Basic",
                    "Truy c·∫≠p kh√≥a h·ªçc cao c·∫•p v√† t√≠nh nƒÉng h∆∞·ªõng d·∫´n c∆° b·∫£n",
                    1, // 1 month duration
                    new BigDecimal("3000"), // 79,000 VND
                    PremiumPlan.PlanType.PREMIUM_BASIC,
                    new BigDecimal("10"), // 10% student discount
                    "[\"Truy c·∫≠p kh√≥a h·ªçc cao c·∫•p\", \"Tr√≤ chuy·ªán c∆° b·∫£n v·ªõi mentor\", \"Ch·ª©ng ch·ªâ ho√†n th√†nh kh√≥a h·ªçc\", \"H·ªó tr·ª£ ∆∞u ti√™n\"]");

            // Create PREMIUM_PLUS plan
            createPremiumPlanIfNotExists(
                    "premium_plus",
                    "Premium Plus",
                    "Truy c·∫≠p ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ t√≠nh nƒÉng cao c·∫•p bao g·ªìm h∆∞·ªõng d·∫´n 1-1",
                    3, // 3 months duration
                    new BigDecimal("4000"), // 249,000 VND
                    PremiumPlan.PlanType.PREMIUM_PLUS,
                    new BigDecimal("15"), // 15% student discount
                    "[\"T·∫•t c·∫£ t√≠nh nƒÉng Premium Basic\", \"H∆∞·ªõng d·∫´n 1-1 kh√¥ng gi·ªõi h·∫°n\", \"T∆∞ v·∫•n ngh·ªÅ nghi·ªáp\", \"ƒê√°nh gi√° CV\", \"H·ªó tr·ª£ t√¨m vi·ªác l√†m\", \"H·ªôi th·∫£o ƒë·ªôc quy·ªÅn\"]");

            // Create STUDENT plan
            createPremiumPlanIfNotExists(
                    "student",
                    "Student Pack",
                    "G√≥i ∆∞u ƒë√£i ƒë·∫∑c bi·ªát cho sinh vi√™n v·ªõi t√≠nh nƒÉng cao c·∫•p thi·∫øt y·∫øu",
                    1, // 1 month duration
                    new BigDecimal("2000"), // 20,000 VND (already discounted base price)
                    PremiumPlan.PlanType.STUDENT_PACK,
                    new BigDecimal("0"), // No additional discount (already base discounted price)
                    "[\"Truy c·∫≠p kh√≥a h·ªçc cao c·∫•p\", \"Truy c·∫≠p c·ªông ƒë·ªìng sinh vi√™n\", \"H∆∞·ªõng d·∫´n c∆° b·∫£n\", \"Ch·ª©ng ch·ªâ kh√≥a h·ªçc\", \"T·∫£i t√†i li·ªáu h·ªçc t·∫≠p\"]");

            log.info("üéâ T·∫•t c·∫£ g√≥i premium ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng");

        } catch (Exception e) {
            log.error("‚ùå Error initializing premium plans: {}", e.getMessage(), e);
            throw new RuntimeException("Failed to initialize premium plans", e);
        }
    }

    private void createPremiumPlanIfNotExists(String name, String displayName, String description,
            Integer durationMonths, BigDecimal price,
            PremiumPlan.PlanType planType, BigDecimal studentDiscountPercent,
            String features) {
        if (!premiumPlanRepository.findByName(name).isPresent()) {
            PremiumPlan plan = PremiumPlan.builder()
                    .name(name)
                    .displayName(displayName)
                    .description(description)
                    .durationMonths(durationMonths)
                    .price(price)
                    .currency("VND")
                    .planType(planType)
                    .studentDiscountPercent(studentDiscountPercent)
                    .features(features)
                    .isActive(true)
                    .maxSubscribers(null) // Unlimited subscribers
                    .createdAt(LocalDateTime.now())
                    .updatedAt(LocalDateTime.now())
                    .build();

            premiumPlanRepository.save(plan);
            log.info("‚úÖ Created premium plan: {} ({})", displayName, planType);
        } else {
            log.info("‚úÖ Premium plan already exists: {} ({})", displayName, planType);
        }
    }

    private void createUserIfNotExists(String email, String password, Set<Role> roles, String description,
            PrimaryRole primaryRole, UserStatus userStatus) {
        if (!userRepository.existsByEmail(email)) {
            User user = User.builder()
                    .email(email)
                    .password(passwordEncoder.encode(password))
                    .status(userStatus)
                    .isEmailVerified(true)
                    .roles(roles)
                    .primaryRole(primaryRole)
                    .createdAt(LocalDateTime.now())
                    .updatedAt(LocalDateTime.now())
                    .build();

            userRepository.save(user);
            log.info("‚úÖ Created {} with email: {} and primary role: {}", description, email, primaryRole);
        } else {
            log.info("‚úÖ {} already exists: {}", description, email);
        }
    }

    private void initializeCourses() {
        try {
            // Get mentor user as course author
            User mentor = userRepository.findByEmail("exementor@gmail.com")
                    .orElseThrow(() -> new RuntimeException("Mentor user not found"));

            // Course 1: Java Programming Fundamentals
            createCourseIfNotExists(
                    "L·∫≠p tr√¨nh Java c∆° b·∫£n",
                    "Kh√≥a h·ªçc to√†n di·ªán v·ªÅ Java d√†nh cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu. H·ªçc c√°c kh√°i ni·ªám c∆° b·∫£n, OOP, v√† x√¢y d·ª±ng ·ª©ng d·ª•ng th·ª±c t·∫ø.",
                    "BEGINNER",
                    CourseStatus.PUBLIC,
                    new BigDecimal("299000"),
                    "VND",
                    mentor,
                    new String[][]{
                            {"Gi·ªõi thi·ªáu v·ªÅ Java", "T√¨m hi·ªÉu v·ªÅ l·ªãch s·ª≠ Java, c√†i ƒë·∫∑t JDK v√† vi·∫øt ch∆∞∆°ng tr√¨nh ƒë·∫ßu ti√™n"},
                            {"C√∫ ph√°p c∆° b·∫£n v√† Ki·ªÉu d·ªØ li·ªáu", "H·ªçc v·ªÅ bi·∫øn, ki·ªÉu d·ªØ li·ªáu, to√°n t·ª≠ v√† c·∫•u tr√∫c ƒëi·ªÅu khi·ªÉn"},
                            {"L·∫≠p tr√¨nh H∆∞·ªõng ƒë·ªëi t∆∞·ª£ng", "Hi·ªÉu v·ªÅ classes, objects, inheritance v√† polymorphism"},
                            {"Collections v√† Streams", "L√†m vi·ªác v·ªõi List, Set, Map v√† Stream API"},
                            {"Exception Handling", "X·ª≠ l√Ω l·ªói v√† ngo·∫°i l·ªá trong Java"}
                    });

            // Course 2: Web Development with Spring Boot
            createCourseIfNotExists(
                    "Ph√°t tri·ªÉn Web v·ªõi Spring Boot",
                    "X√¢y d·ª±ng ·ª©ng d·ª•ng web hi·ªán ƒë·∫°i v·ªõi Spring Boot, REST API, v√† microservices. Th·ª±c h√†nh v·ªõi c√°c d·ª± √°n th·ª±c t·∫ø.",
                    "INTERMEDIATE",
                    CourseStatus.PUBLIC,
                    new BigDecimal("599000"),
                    "VND",
                    mentor,
                    new String[][]{
                            {"Spring Boot Basics", "T√¨m hi·ªÉu v·ªÅ Spring Framework v√† t·∫°o ·ª©ng d·ª•ng Spring Boot ƒë·∫ßu ti√™n"},
                            {"RESTful API Development", "Thi·∫øt k·∫ø v√† x√¢y d·ª±ng REST API v·ªõi Spring MVC"},
                            {"Database Integration", "L√†m vi·ªác v·ªõi JPA, Hibernate v√† Spring Data"},
                            {"Security v√† Authentication", "Tri·ªÉn khai b·∫£o m·∫≠t v·ªõi Spring Security v√† JWT"},
                            {"Microservices Architecture", "X√¢y d·ª±ng v√† deploy microservices v·ªõi Spring Cloud"}
                    });

            // Course 3: Frontend Development v·ªõi React
            createCourseIfNotExists(
                    "Ph√°t tri·ªÉn Frontend v·ªõi React",
                    "Kh√≥a h·ªçc to√†n di·ªán v·ªÅ React.js ƒë·ªÉ x√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng hi·ªán ƒë·∫°i, t∆∞∆°ng t√°c. H·ªçc React hooks, state management, v√† best practices.",
                    "INTERMEDIATE",
                    CourseStatus.PUBLIC,
                    new BigDecimal("499000"),
                    "VND",
                    mentor,
                    new String[][]{
                            {"React Fundamentals", "Components, JSX, Props v√† State c∆° b·∫£n"},
                            {"React Hooks", "useState, useEffect, useContext v√† custom hooks"},
                            {"State Management", "Context API, Redux v√† Zustand"},
                            {"Routing v√† Navigation", "React Router v√† dynamic routing"},
                            {"Performance Optimization", "Lazy loading, memoization v√† code splitting"}
                    });

            // Course 4: Database Design v√† SQL
            createCourseIfNotExists(
                    "Thi·∫øt k·∫ø Database v√† SQL",
                    "H·ªçc c√°ch thi·∫øt k·∫ø database hi·ªáu qu·∫£, vi·∫øt SQL queries ph·ª©c t·∫°p, v√† t·ªëi ∆∞u h√≥a performance. Th·ª±c h√†nh v·ªõi PostgreSQL v√† MySQL.",
                    "BEGINNER",
                    CourseStatus.PENDING,
                    new BigDecimal("399000"),
                    "VND",
                    mentor,
                    new String[][]{
                            {"Database Fundamentals", "Gi·ªõi thi·ªáu v·ªÅ RDBMS, ER Diagrams v√† normalization"},
                            {"SQL Basics", "SELECT, INSERT, UPDATE, DELETE v√† basic queries"},
                            {"Advanced SQL", "JOINs, subqueries, window functions v√† CTEs"},
                            {"Database Design", "Normalization, indexing v√† constraint design"},
                            {"Performance Tuning", "Query optimization, indexing strategies v√† monitoring"}
                    });

            // Course 5: DevOps v√† CI/CD
            createCourseIfNotExists(
                    "DevOps v√† CI/CD Pipeline",
                    "H·ªçc c√°ch tri·ªÉn khai ·ª©ng d·ª•ng hi·ªán ƒë·∫°i v·ªõi Docker, Kubernetes, Jenkins v√† GitLab CI. X√¢y d·ª±ng pipeline t·ª± ƒë·ªông t·ª´ development ƒë·∫øn production.",
                    "ADVANCED",
                    CourseStatus.PENDING,
                    new BigDecimal("799000"),
                    "VND",
                    mentor,
                    new String[][]{
                            {"DevOps Introduction", "DevOps culture, practices v√† tools overview"},
                            {"Containerization v·ªõi Docker", "Docker basics, images, containers v√† Docker Compose"},
                            {"CI/CD v·ªõi Jenkins", "Thi·∫øt l·∫≠p Jenkins pipeline v√† automation"},
                            {"Kubernetes Orchestration", "Deploy v√† manage containers v·ªõi Kubernetes"},
                            {"Monitoring v√† Logging", "Prometheus, Grafana v√† ELK stack"}
                    });

            log.info("üéâ All sample courses initialized successfully");

        } catch (Exception e) {
            log.error("‚ùå Error initializing courses: {}", e.getMessage(), e);
            throw new RuntimeException("Failed to initialize courses", e);
        }
    }

    private void createCourseIfNotExists(String title, String description, String level,
            CourseStatus status, BigDecimal price, String currency, User author, String[][] modulesData) {
        
        if (courseRepository.findByTitle(title).isPresent()) {
            log.info("‚úÖ Course already exists: {}", title);
            return;
        }

        Instant now = Instant.now();
        
        Course course = Course.builder()
                .title(title)
                .description(description)
                .level(level)
                .status(status)
                .price(price)
                .currency(currency)
                .author(author)
                .createdAt(now)
                .updatedAt(now)
                .submittedAt(status == CourseStatus.PENDING || status == CourseStatus.PUBLIC ? now.minusSeconds(86400) : null) // 1 day ago if pending/public
                .publishedAt(status == CourseStatus.PUBLIC ? now : null)
                .build();

        course = courseRepository.save(course);
        log.info("‚úÖ Created course: {}", title);

        // Create modules with lessons, quizzes and assignments
        for (int i = 0; i < modulesData.length; i++) {
            String moduleTitle = modulesData[i][0];
            String moduleDesc = modulesData[i][1];

            com.exe.skillverse_backend.course_service.entity.Module module = com.exe.skillverse_backend.course_service.entity.Module.builder()
                    .course(course)
                    .title(moduleTitle)
                    .description(moduleDesc)
                    .orderIndex(i + 1)
                    .createdAt(now)
                    .updatedAt(now)
                    .build();

            module = moduleRepository.save(module);
            log.info("  ‚úÖ Created module {}: {}", i + 1, moduleTitle);

            // Create 3 lessons per module
            createLessonsForModule(module, i + 1);
            
            // Create 1 quiz per module
            createQuizForModule(module, i + 1);
            
            // Create 1 assignment per module
            createAssignmentForModule(module, i + 1);
        }
    }

    private void createLessonsForModule(com.exe.skillverse_backend.course_service.entity.Module module, int moduleIndex) {
        Instant now = Instant.now();
        
        String[] lessonTitles = {
                "B√†i gi·∫£ng video",
                "T√†i li·ªáu ƒë·ªçc",
                "Th·ª±c h√†nh"
        };
        
        LessonType[] lessonTypes = {
                LessonType.VIDEO,
                LessonType.READING,
                LessonType.CODELAB
        };
        
        String[] lessonContents = {
                "Video b√†i gi·∫£ng chi ti·∫øt v·ªõi v√≠ d·ª• th·ª±c t·∫ø v√† demo code. Th·ªùi l∆∞·ª£ng 30-45 ph√∫t.",
                "T√†i li·ªáu ƒë·ªçc b·ªï sung v·ªõi c√°c kh√°i ni·ªám chi ti·∫øt, best practices v√† tips. Kho·∫£ng 15-20 trang.",
                "B√†i th·ª±c h√†nh v·ªõi code starter v√† h∆∞·ªõng d·∫´n chi ti·∫øt. Th·ªùi gian ho√†n th√†nh: 1-2 gi·ªù."
        };

        for (int i = 0; i < 3; i++) {
            Lesson lesson = Lesson.builder()
                    .module(module)
                    .title(lessonTitles[i] + " - Module " + moduleIndex)
                    .type(lessonTypes[i])
                    .contentText(lessonContents[i])
                    .orderIndex(i + 1)
                    .durationSec(lessonTypes[i] == LessonType.VIDEO ? 2400 : (lessonTypes[i] == LessonType.READING ? 1200 : 5400)) // in seconds
                    .videoUrl(lessonTypes[i] == LessonType.VIDEO ? "https://example.com/video" + (i+1) : null)
                    .createdAt(now)
                    .updatedAt(now)
                    .build();

            lessonRepository.save(lesson);
        }
    }

    private void createQuizForModule(com.exe.skillverse_backend.course_service.entity.Module module, int moduleIndex) {
        Instant now = Instant.now();
        
        Quiz quiz = Quiz.builder()
                .module(module)
                .title("Ki·ªÉm tra ki·∫øn th·ª©c Module " + moduleIndex)
                .description("B√†i ki·ªÉm tra tr·∫Øc nghi·ªám v·ªõi 10 c√¢u h·ªèi ƒë·ªÉ ƒë√°nh gi√° ki·∫øn th·ª©c c·ªßa b·∫°n")
                .passScore(70)
                .createdAt(now)
                .updatedAt(now)
                .build();

        quizRepository.save(quiz);
    }

    private void createAssignmentForModule(com.exe.skillverse_backend.course_service.entity.Module module, int moduleIndex) {
        Instant now = Instant.now();
        
        Assignment assignment = Assignment.builder()
                .module(module)
                .title("B√†i t·∫≠p l·ªõn Module " + moduleIndex)
                .description("B√†i t·∫≠p th·ª±c h√†nh l·ªõn ƒë·ªÉ √°p d·ª•ng c√°c ki·∫øn th·ª©c ƒë√£ h·ªçc. Y√™u c·∫ßu ho√†n th√†nh project nh·ªè v√† submit code.")
                .submissionType(SubmissionType.FILE)
                .maxScore(new BigDecimal("100"))
                .dueAt(now.plusSeconds(604800)) // Due in 7 days
                .createdAt(now)
                .updatedAt(now)
                .build();

        assignmentRepository.save(assignment);
    }

}
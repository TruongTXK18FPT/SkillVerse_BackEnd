package com.exe.skillverse_backend.ai_service.service;

import com.exe.skillverse_backend.ai_service.dto.ChatMessageResponse;
import com.exe.skillverse_backend.ai_service.dto.ChatSessionSummary;
import com.exe.skillverse_backend.ai_service.dto.request.ChatRequest;
import com.exe.skillverse_backend.ai_service.dto.response.ChatResponse;
import com.exe.skillverse_backend.ai_service.entity.ChatMessage;
import com.exe.skillverse_backend.ai_service.repository.ChatMessageRepository;
import com.exe.skillverse_backend.auth_service.entity.User;
import com.exe.skillverse_backend.shared.exception.ApiException;
import com.exe.skillverse_backend.shared.exception.ErrorCode;
import lombok.extern.slf4j.Slf4j;
import org.springframework.ai.chat.model.ChatModel;
import org.springframework.ai.chat.client.ChatClient;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Service for AI-powered career counseling chatbot using Spring AI
 * Uses Mistral AI for latest career trends, with Gemini AI fallback
 * Provides guidance on majors, career trends, skill development, and
 * educational paths
 */
@Service
@Slf4j
public class AiChatbotService {

    private final ChatModel mistralChatModel;
    private final ChatMessageRepository chatMessageRepository;
    private final InputValidationService inputValidationService;

    public AiChatbotService(
            @Qualifier("mistralAiChatModel") ChatModel mistralChatModel,
            ChatMessageRepository chatMessageRepository,
            InputValidationService inputValidationService) {
        this.mistralChatModel = mistralChatModel;
        this.chatMessageRepository = chatMessageRepository;
        this.inputValidationService = inputValidationService;
    }

    // Career counseling system prompt (100% Vietnamese, chi ti·∫øt nh∆∞ b·∫£n ti·∫øng Anh)
    private static final String SYSTEM_PROMPT = """
            B·∫°n l√† Meowl, c·ªë v·∫•n ngh·ªÅ nghi·ªáp AI th√¢n thi·ªán c·ªßa SkillVerse. üêæ

            QUY T·∫ÆC TR·∫¢ L·ªúI:
            - Tr·∫£ l·ªùi TR·ª∞C TI·∫æP b·∫±ng ti·∫øng Vi·ªát, kh√¥ng nh·∫Øc l·∫°i c√¢u h·ªèi
            - KH√îNG th√™m ti√™u ƒë·ªÅ nh∆∞ "Tr·∫£ l·ªùi:", "C√¢u h·ªèi:", "Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát..."
            - B·∫Øt ƒë·∫ßu NGAY b·∫±ng n·ªôi dung c√¢u tr·∫£ l·ªùi
            - S·ª≠ d·ª•ng ti·∫øng Vi·ªát chu·∫©n, c√≥ d·∫•u, d·ªÖ ƒë·ªçc
            - Gi·ªØ t√™n ngh·ªÅ/c√¥ng ngh·ªá ti·∫øng Anh (Data Scientist, React, DevOps...)

            X·ª¨ L√ù INPUT SAI/V√î L√ù (AUTO-CORRECTION):
            - N·∫øu ph√°t hi·ªán th√¥ng tin sai (IELTS 10.0, GPA 5.0, tu·ªïi √¢m, v.v.):
              1) T·ª∞ ƒê·ªòNG ƒêI·ªÄU CH·ªàNH v·ªÅ gi√° tr·ªã h·ª£p l√Ω (IELTS 10.0 ‚Üí 9.0, GPA 5.0 ‚Üí 4.0)
              2) TH√îNG B√ÅO ƒëi·ªÅu ch·ªânh m·ªôt c√°ch L·ªäCh S·ª∞ ngay ƒë·∫ßu response:
                 "‚ö†Ô∏è *M√¨nh nh·∫≠n th·∫•y b·∫°n nh·∫≠p IELTS 10.0, nh∆∞ng thang ƒëi·ªÉm IELTS ch·ªâ t·ª´ 0-9.0. M√¨nh ƒë√£ hi·ªÉu l√† b·∫°n ƒë·∫°t **9.0** (xu·∫•t s·∫Øc) nh√©!*"
              3) Ti·∫øp t·ª•c T∆Ø V·∫§N nh∆∞ b√¨nh th∆∞·ªùng v·ªõi gi√° tr·ªã ƒë√£ ƒëi·ªÅu ch·ªânh
            - V·ªõi th√¥ng tin th√¥ t·ª•c/kh√¥ng ph√π h·ª£p: T·ª´ ch·ªëi l·ªãch s·ª±, kh√¥ng tr·∫£ l·ªùi

            QUY T·∫ÆC ƒêI·ªÄU CH·ªàNH:
            - IELTS: 0-9.0 (max 9.0, c√°c m·ªëc 0.5)
            - TOEFL: 0-120 (max 120)
            - GPA: 0-4.0 (max 4.0, thang ƒëi·ªÉm M·ªπ) ho·∫∑c 0-10 (thang ƒëi·ªÉm Vi·ªát Nam)
            - Tu·ªïi: 15-100 (h·ª£p l√Ω cho h·ªçc t·∫≠p/ngh·ªÅ nghi·ªáp)
            - Kinh nghi·ªám: 0-50 nƒÉm (h·ª£p l√Ω)
            - N·∫øu kh√¥ng ch·∫Øc ch·∫Øn: H·ªèi l·∫°i user thay v√¨ ƒëo√°n

            B·ªêI C·∫¢NH 2025:
            - C·∫≠p nh·∫≠t xu h∆∞·ªõng vi·ªác l√†m, c√¥ng ngh·ªá, m·ª©c l∆∞∆°ng 2025; hybrid/remote ph·ªï bi·∫øn.
            - ∆Øu ti√™n c√¥ng ngh·ªá hi·ªán h√†nh; c√¥ng ngh·ªá c≈© ch·ªâ ƒë·ªÉ so s√°nh l·ªãch s·ª≠.

            C·∫§U TR√öC TR·∫¢ L·ªúI (d√πng Markdown, ti·∫øng Vi·ªát thu·∫ßn):

            ### üß≠ T·ªïng quan c√° nh√¢n h√≥a
            - T√≥m t·∫Øt c√¢u h·ªèi v√† m·ª•c ti√™u c·ªßa ng∆∞·ªùi d√πng (1‚Äì2 c√¢u)
            - G·ª£i √Ω ƒë·ªãnh h∆∞·ªõng ph√π h·ª£p d·ª±a tr√™n b·ªëi c·∫£nh/ng√†nh

            ### ‚úÖ L√Ω do n√™n theo ƒëu·ªïi
            - L·ª£i √≠ch 1 (k√®m v√≠ d·ª• ho·∫∑c s·ªë li·ªáu th·ª±c t·∫ø n·∫øu c√≥)
            - L·ª£i √≠ch 2 (nhu c·∫ßu tuy·ªÉn d·ª•ng/m·ª©c l∆∞∆°ng tham kh·∫£o 2025)
            - L·ª£i √≠ch 3 (c∆° h·ªôi thƒÉng ti·∫øn, ƒëa d·∫°ng vai tr√≤)

            ### ‚öñÔ∏è So s√°nh l·ª±a ch·ªçn/nh√°nh l·ªô tr√¨nh (n·∫øu ph√π h·ª£p)
            | Ti√™u ch√≠ | Ph∆∞∆°ng √°n A | Ph∆∞∆°ng √°n B | Ph√π h·ª£p v·ªõi |
            |---|---|---|---|
            | ƒê·ªô d·ªÖ h·ªçc | ‚úÖ D·ªÖ | ‚ùå Kh√≥ | Ng∆∞·ªùi m·ªõi |
            | C∆° h·ªôi vi·ªác l√†m | üî• Cao | üìâ Trung b√¨nh | 2025: A |
            | C√¥ng c·ª• | React, Spring | Django, Vue | ... |

            ### üöÄ L·ªô tr√¨nh h·ªçc theo m·ªëc th·ªùi gian
            1) Th√°ng 1: N·ªÅn t·∫£ng (ki·∫øn th·ª©c c·ªët l√µi, t√†i nguy√™n g·ª£i √Ω)
            2) Th√°ng 2‚Äì3: Th·ª±c h√†nh (mini project/portfolio, checklist k·ªπ nƒÉng)
            3) Th√°ng 4: Ch·ª©ng ch·ªâ/·ª©ng tuy·ªÉn (CV, GitHub, networking)

            ### üß© K·ªπ nƒÉng c·ªët l√µi & c√¥ng c·ª•
            - K·ªπ nƒÉng: thu·∫≠t to√°n, OOP, h·ªá th·ªëng, SQL/NoSQL, cloud c∆° b·∫£n...
            - C√¥ng c·ª•: Git/GitHub, Docker c∆° b·∫£n, CI/CD ƒë∆°n gi·∫£n...

            ### üí∞ M·ª©c l∆∞∆°ng tham kh·∫£o (n·∫øu li√™n quan)
            ```
            Fresher/Junior: [kho·∫£ng l∆∞∆°ng VNƒê]
            Mid-level: [kho·∫£ng l∆∞∆°ng VNƒê]
            Senior: [kho·∫£ng l∆∞∆°ng VNƒê]
            ```

            ### üìö T√†i nguy√™n g·ª£i √Ω (ch·ªçn l·ªçc)
            - 1‚Äì3 kh√≥a h·ªçc/channels/t√†i li·ªáu ch·∫•t l∆∞·ª£ng, ghi r√µ m·ª•c ƒë√≠ch s·ª≠ d·ª•ng

            ### ‚ö†Ô∏è R·ªßi ro & c√°ch kh·∫Øc ph·ª•c
            - R·ªßi ro A ‚Üí Gi·∫£i ph√°p ng·∫Øn g·ªçn
            - R·ªßi ro B ‚Üí Gi·∫£i ph√°p ng·∫Øn g·ªçn

            ### üí° L·ªùi khuy√™n c·ªßa Meowl
            - 1‚Äì2 c√¢u ƒë·ªãnh h∆∞·ªõng, ƒë·ªông vi√™n th·ª±c t·∫ø

            ### ‚ùìC√¢u h·ªèi ti·∫øp theo ƒë·ªÉ c√° nh√¢n h√≥a h∆°n
            - B·∫°n c√≥ bao nhi√™u th·ªùi gian m·ªói tu·∫ßn cho vi·ªác h·ªçc?
            - B·∫°n th√≠ch h∆∞·ªõng Frontend/Backend/Data/AI hay lƒ©nh v·ª±c kh√°c?
            - B·∫°n mu·ªën nh·∫Øm t·ªõi m·ª©c l∆∞∆°ng/m·ªëc th·ªùi gian n√†o?

            QUY T·∫ÆC TR√åNH B√ÄY:
            - D√πng ti√™u ƒë·ªÅ ###, danh s√°ch g·ªçn g√†ng, emoji v·ª´a ph·∫£i.
            - Lu√¥n c√≥ m·ª•c "‚ö†Ô∏è R·ªßi ro & c√°ch kh·∫Øc ph·ª•c" khi tr·∫£ l·ªùi chi ti·∫øt.
            - D√πng b·∫£ng khi so s√°nh; d√πng ``` cho d·ªØ li·ªáu ƒë·ªãnh d·∫°ng (m·ª©c l∆∞∆°ng,...).
            - K·∫øt th√∫c b·∫±ng 1‚Äì3 c√¢u h·ªèi ƒë·ªÉ ti·∫øp t·ª•c h·ªôi tho·∫°i.
            - 100% ti·∫øng Vi·ªát; ch·ªâ gi·ªØ t√™n ri√™ng ti·∫øng Anh khi c·∫ßn.
            """;

    /**
     * Process a chat message and get AI response
     */
    @Transactional
    public ChatResponse chat(ChatRequest request, User user) {
        // Validate user input (profanity, impossible targets like IELTS 10.0)
        try {
            inputValidationService.validateTextOrThrow(request.getMessage());
        } catch (IllegalArgumentException ex) {
            throw new ApiException(ErrorCode.BAD_REQUEST, ex.getMessage());
        }
        Long sessionId = request.getSessionId();

        // Generate new session ID if not provided
        if (sessionId == null) {
            sessionId = System.currentTimeMillis();
            log.info("Starting new chat session {} for user {}", sessionId, user.getId());
        }

        // Build conversation context
        List<ChatMessage> previousMessages = chatMessageRepository
                .findBySessionIdOrderByCreatedAtAsc(sessionId);

        // Add correction hints to help AI detect and fix invalid inputs
        String messageWithHints = addCorrectionHints(request.getMessage());

        // Call AI with automatic provider selection and fallback
        String aiResponse = callAIWithFallback(messageWithHints, previousMessages);

        // Save to database (save ONLY user's original message without any prefix)
        ChatMessage chatMessage = ChatMessage.builder()
                .user(user)
                .sessionId(sessionId)
                .userMessage(request.getMessage()) // Save raw user message
                .aiResponse(aiResponse)
                .createdAt(LocalDateTime.now())
                .build();

        chatMessageRepository.save(chatMessage);

        log.info("Chat session {} - User: {}, AI response length: {}",
                sessionId, user.getId(), aiResponse.length());

        return ChatResponse.builder()
                .sessionId(sessionId)
                .message(request.getMessage())
                .aiResponse(aiResponse)
                .timestamp(chatMessage.getCreatedAt())
                .build();
    }

    /**
     * Call Mistral AI for chat using Spring AI
     * Using Mistral AI for latest 2025 career trends and insights
     */
    private String callAIWithFallback(String userMessage, List<ChatMessage> previousMessages) {
        log.info("Calling Mistral AI chatbot using Spring AI");

        try {
            return callMistralForChat(userMessage, previousMessages);
        } catch (Exception e) {
            log.error("Mistral AI failed: {}", e.getMessage());
            throw new ApiException(ErrorCode.SERVICE_UNAVAILABLE,
                    "AI chatbot service is temporarily unavailable. Please try again later.");
        }
    }

    /**
     * Call Mistral AI for chat conversation with context using Spring AI ChatClient
     * Mistral provides more recent training data for 2025 career trends
     */
    private String callMistralForChat(String userMessage, List<ChatMessage> previousMessages) {
        try {
            // Build conversation history
            StringBuilder contextBuilder = new StringBuilder();
            contextBuilder.append("Conversation history:\n");

            for (ChatMessage prev : previousMessages) {
                contextBuilder.append("User: ").append(prev.getUserMessage()).append("\n");
                contextBuilder.append("Assistant: ").append(prev.getAiResponse()).append("\n");
            }

            contextBuilder.append("User: ").append(userMessage);

            String conversationHistory = contextBuilder.toString();
            log.debug("Calling Mistral AI with {} previous messages", previousMessages.size());

            // Use Spring AI ChatClient for Mistral
            return ChatClient.builder(mistralChatModel)
                    .build()
                    .prompt()
                    .system(SYSTEM_PROMPT
                            + "\nCRITICAL: H√£y tr·∫£ l·ªùi b·∫±ng ƒë√∫ng ng√¥n ng·ªØ ng∆∞·ªùi d√πng ƒëang d√πng (∆∞u ti√™n Ti·∫øng Vi·ªát). N·∫øu ph√°t hi·ªán y√™u c·∫ßu v√¥ l√Ω (v√≠ d·ª• m·ª•c ti√™u IELTS 10.0), h√£y gi·∫£i th√≠ch v√† ƒë∆∞a g·ª£i √Ω h·ª£p l·ªá b·∫±ng Ti·∫øng Vi·ªát.")
                    .user(conversationHistory)
                    .call()
                    .content();

        } catch (Exception e) {
            log.error("Mistral chat error: {}", e.getMessage());
            throw new ApiException(ErrorCode.SERVICE_UNAVAILABLE,
                    "Mistral AI service unavailable: " + e.getMessage());
        }
    }

    /**
     * Get conversation history for a session
     * Returns DTOs to avoid lazy loading issues
     * DEFENSIVE: Strips echo prefix from old database messages
     */
    @Transactional(readOnly = true)
    public List<ChatMessageResponse> getConversationHistory(Long sessionId, Long userId) {
        List<ChatMessage> messages = chatMessageRepository.findBySessionIdOrderByCreatedAtAsc(sessionId);

        // Verify user owns this session
        if (!messages.isEmpty() && !messages.get(0).getUser().getId().equals(userId)) {
            throw new ApiException(ErrorCode.FORBIDDEN, "Access denied to this conversation");
        }

        // Convert to DTOs and clean old echo prefix
        return messages.stream()
                .map(msg -> {
                    ChatMessageResponse response = convertToResponse(msg);
                    // DEFENSIVE: Clean any old echo prefix from database
                    response.setUserMessage(cleanEchoPrefix(response.getUserMessage()));
                    return response;
                })
                .collect(Collectors.toList());
    }

    /**
     * Get all sessions for a user with titles
     * Returns session summaries with title preview from first message
     */
    @Transactional(readOnly = true)
    public List<ChatSessionSummary> getUserSessions(Long userId) {
        List<Long> sessionIds = chatMessageRepository.findSessionIdsByUserId(userId);

        return sessionIds.stream()
                .map(sessionId -> {
                    List<ChatMessage> messages = chatMessageRepository.findBySessionIdOrderByCreatedAtAsc(sessionId);
                    if (messages.isEmpty()) {
                        return null;
                    }

                    // Use custom title if set, otherwise auto-generate from first message
                    ChatMessage firstMessage = messages.get(0);
                    String title;
                    if (firstMessage.getCustomTitle() != null && !firstMessage.getCustomTitle().isEmpty()) {
                        title = firstMessage.getCustomTitle();
                    } else {
                        title = extractTitle(firstMessage.getUserMessage());
                    }

                    return ChatSessionSummary.builder()
                            .sessionId(sessionId)
                            .title(title)
                            .lastMessageAt(messages.get(messages.size() - 1).getCreatedAt())
                            .messageCount(messages.size())
                            .build();
                })
                .filter(summary -> summary != null)
                .collect(Collectors.toList());
    }

    /**
     * Convert ChatMessage entity to response DTO
     */
    private ChatMessageResponse convertToResponse(ChatMessage message) {
        return ChatMessageResponse.builder()
                .id(message.getId())
                .sessionId(message.getSessionId())
                .userMessage(message.getUserMessage())
                .aiResponse(message.getAiResponse())
                .createdAt(message.getCreatedAt())
                .userId(message.getUser().getId())
                .userEmail(message.getUser().getEmail())
                .build();
    }

    /**
     * Delete a chat session and all its messages
     */
    @Transactional
    public void deleteSession(Long sessionId, Long userId) {
        // Verify user owns this session
        List<ChatMessage> messages = chatMessageRepository.findBySessionIdOrderByCreatedAtAsc(sessionId);

        if (messages.isEmpty()) {
            throw new ApiException(ErrorCode.NOT_FOUND, "Phi√™n tr√≤ chuy·ªán kh√¥ng t·ªìn t·∫°i");
        }

        if (!messages.get(0).getUser().getId().equals(userId)) {
            throw new ApiException(ErrorCode.FORBIDDEN, "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a phi√™n n√†y");
        }

        // Delete all messages in this session
        chatMessageRepository.deleteBySessionId(sessionId);
        log.info("Deleted session {} with {} messages for user {}", sessionId, messages.size(), userId);
    }

    /**
     * Rename a chat session by updating custom title
     * Note: Currently stores title in first message's metadata.
     * Future improvement: Add ChatSession entity with customTitle field
     */
    @Transactional
    public ChatSessionSummary renameSession(Long sessionId, Long userId, String newTitle) {
        // Verify user owns this session
        List<ChatMessage> messages = chatMessageRepository.findBySessionIdOrderByCreatedAtAsc(sessionId);

        if (messages.isEmpty()) {
            throw new ApiException(ErrorCode.NOT_FOUND, "Phi√™n tr√≤ chuy·ªán kh√¥ng t·ªìn t·∫°i");
        }

        if (!messages.get(0).getUser().getId().equals(userId)) {
            throw new ApiException(ErrorCode.FORBIDDEN, "B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªïi t√™n phi√™n n√†y");
        }

        // Validate title
        if (newTitle == null || newTitle.trim().isEmpty()) {
            throw new ApiException(ErrorCode.BAD_REQUEST, "Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }

        if (newTitle.length() > 100) {
            throw new ApiException(ErrorCode.BAD_REQUEST, "Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100 k√Ω t·ª±");
        }

        String trimmedTitle = newTitle.trim();

        // Store custom title in first message's customTitle field
        ChatMessage firstMessage = messages.get(0);
        firstMessage.setCustomTitle(trimmedTitle);
        chatMessageRepository.save(firstMessage);

        log.info("Renamed session {} to '{}' for user {}", sessionId, trimmedTitle, userId);

        return ChatSessionSummary.builder()
                .sessionId(sessionId)
                .title(trimmedTitle)
                .lastMessageAt(messages.get(messages.size() - 1).getCreatedAt())
                .messageCount(messages.size())
                .build();
    }

    /**
     * Extract a meaningful title from user message
     * Summarizes user request into short, clear title (50 chars max)
     * Uses smart keyword extraction to generate concise titles
     * Example: "xin ch√†o, t√¥i mu·ªën t√¨m hi·ªÉu v·ªÅ trending ng√†nh h·ªçc nƒÉm 2025 v√† nh·ªØng
     * m√¥n ƒë√°ng h·ªçc" ‚Üí "Trending ng√†nh h·ªçc 2025"
     */
    private String extractTitle(String userMessage) {
        if (userMessage == null || userMessage.isEmpty()) {
            return "Cu·ªôc tr√≤ chuy·ªán m·ªõi";
        }

        // FIRST: Remove echo prefix from old database messages
        String cleaned = cleanEchoPrefix(userMessage);

        // Remove greetings at start
        cleaned = cleaned.replaceAll("(?i)^(xin ch√†o|hello|hi|ch√†o|meowl)[,!.\\s]*", "");

        // Extract main topic (intelligent keyword extraction)
        cleaned = extractKeywords(cleaned);

        // Remove question words at end
        cleaned = cleaned.replaceAll("(?i)\\s+(nh∆∞ th·∫ø n√†o|th·∫ø n√†o|ra sao|kh√¥ng|ch·ª©|nh·ªâ|√†|h·∫£)\\s*[?!.]*$", "");

        // Remove trailing punctuation
        cleaned = cleaned.replaceAll("[?!.,;:]+$", "").trim();

        // Fallback if too short
        if (cleaned.length() < 3) {
            cleaned = cleanEchoPrefix(userMessage).trim();
            if (cleaned.length() > 50) {
                return cleaned.substring(0, 47) + "...";
            }
        }

        // Capitalize first letter
        if (cleaned.length() > 0) {
            cleaned = cleaned.substring(0, 1).toUpperCase() + cleaned.substring(1);
        }

        // Truncate to 50 chars
        if (cleaned.length() > 50) {
            return cleaned.substring(0, 47) + "...";
        }

        return cleaned;
    }

    /**
     * Extract keywords from user message for title generation
     * Removes filler words and focuses on main topic
     * Example: "t√¥i mu·ªën t√¨m hi·ªÉu v·ªÅ trending ng√†nh h·ªçc nƒÉm 2025" ‚Üí "trending ng√†nh
     * h·ªçc nƒÉm 2025"
     */
    private String extractKeywords(String message) {
        // Remove filler phrases at start
        String result = message
                .replaceAll("(?i)^(t√¥i mu·ªën|cho t√¥i|t√¥i c·∫ßn|h√£y|gi√∫p t√¥i|b·∫°n c√≥ th·ªÉ|m√¨nh mu·ªën|em mu·ªën)\\s+", "")
                .replaceAll("(?i)^(t√¨m hi·ªÉu v·ªÅ|bi·∫øt v·ªÅ|h·ªçc v·ªÅ|xem|t√¨m|h·ªèi v·ªÅ|h·ªèi|h·ªèi xem)\\s+", "")
                .replaceAll("(?i)^(th√¥ng tin v·ªÅ|th√¥ng tin|chi ti·∫øt v·ªÅ|chi ti·∫øt)\\s+", "");

        // Remove expansion tails like "v√† nh·ªØng...", "v√† c√°c..."
        result = result.replaceAll("(?i)\\s+(v√† nh·ªØng|v√† c√°c|c√πng v·ªõi|bao g·ªìm|k√®m theo)\\s+.*", "");

        // Remove date/time context at end if message is already descriptive
        if (result.split("\\s+").length > 4) {
            result = result.replaceAll("(?i)\\s+(trong nƒÉm|nƒÉm|th√°ng|tu·∫ßn|ng√†y)\\s+\\d{4}\\s*$", " nƒÉm $2");
        }

        return result.trim();
    }

    /**
     * Detect and add correction hints to user message for AI to process
     * Example: "IELTS 10.0" ‚Üí adds hint "[Note: IELTS max is 9.0, user likely meant
     * 9.0]"
     */
    private String addCorrectionHints(String message) {
        if (message == null || message.isEmpty()) {
            return message;
        }

        StringBuilder hints = new StringBuilder();

        // Check for IELTS score > 9.0
        if (message.matches(".*[Ii][Ee][Ll][Tt][Ss].*\\b([1-9]\\d|10)(\\.\\d+)?\\b.*")) {
            hints.append("[‚ö†Ô∏è Ph√°t hi·ªán ƒëi·ªÉm IELTS > 9.0. IELTS max = 9.0, h√£y auto-correct v√† gi·∫£i th√≠ch.] ");
        }

        // Check for TOEFL score > 120
        if (message.matches(".*[Tt][Oo][Ee][Ff][Ll].*\\b(1[3-9]\\d|[2-9]\\d{2})\\b.*")) {
            hints.append("[‚ö†Ô∏è Ph√°t hi·ªán ƒëi·ªÉm TOEFL > 120. TOEFL max = 120, h√£y auto-correct v√† gi·∫£i th√≠ch.] ");
        }

        // Check for GPA > 4.0 (assuming 4.0 scale)
        if (message.matches(".*[Gg][Pp][Aa].*\\b([5-9]|\\d{2,})(\\.\\d+)?\\b.*") && !message.contains("thang 10")) {
            hints.append("[‚ö†Ô∏è Ph√°t hi·ªán GPA > 4.0. N·∫øu thang 4.0, max = 4.0. H·ªèi user l√†m r√µ thang ƒëi·ªÉm.] ");
        }

        // Check for unrealistic age
        if (message.matches(".*(tu·ªïi|nƒÉm sinh|age).*\\b([0-9]|1[0-4]|[1-9]\\d{2,})\\b.*")) {
            hints.append("[‚ö†Ô∏è Ph√°t hi·ªán tu·ªïi b·∫•t th∆∞·ªùng (<15 ho·∫∑c >100). H√£y h·ªèi l·∫°i user x√°c nh·∫≠n.] ");
        }

        // If hints found, prepend to message for AI to see
        if (hints.length() > 0) {
            return hints.toString() + "\n\nC√¢u h·ªèi g·ªëc: " + message;
        }

        return message;
    }

    /**
     * Clean echo prefix from old database messages
     * Removes "Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát... C√¢u h·ªèi:" that leaked from system prompt
     */
    private String cleanEchoPrefix(String message) {
        if (message == null || message.isEmpty()) {
            return message;
        }

        // Remove various forms of echo prefix (case insensitive)
        String cleaned = message
                .replaceAll("(?i)^Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát[^.]*\\.\\s*C√¢u h·ªèi:\\s*", "")
                .replaceAll("(?i)^Answer in Vietnamese[^.]*\\.\\s*Question:\\s*", "")
                .trim();

        // If cleaning removed everything, return original
        return cleaned.isEmpty() ? message : cleaned;
    }
}

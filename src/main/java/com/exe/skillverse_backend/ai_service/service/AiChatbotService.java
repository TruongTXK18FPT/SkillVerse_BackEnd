package com.exe.skillverse_backend.ai_service.service;

import com.exe.skillverse_backend.ai_service.dto.request.ChatRequest;
import com.exe.skillverse_backend.ai_service.dto.response.ChatResponse;
import com.exe.skillverse_backend.ai_service.entity.ChatMessage;
import com.exe.skillverse_backend.ai_service.repository.ChatMessageRepository;
import com.exe.skillverse_backend.auth_service.entity.User;
import com.exe.skillverse_backend.shared.exception.ApiException;
import com.exe.skillverse_backend.shared.exception.ErrorCode;
import lombok.extern.slf4j.Slf4j;
import org.springframework.ai.chat.model.ChatModel;
import org.springframework.ai.chat.client.ChatClient;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;

/**
 * Service for AI-powered career counseling chatbot using Spring AI
 * Uses Mistral AI for latest career trends, with Gemini AI fallback
 * Provides guidance on majors, career trends, skill development, and
 * educational paths
 */
@Service
@Slf4j
public class AiChatbotService {

    private final ChatModel mistralChatModel;
    private final ChatMessageRepository chatMessageRepository;
    private final InputValidationService inputValidationService;

    public AiChatbotService(
            @Qualifier("mistralAiChatModel") ChatModel mistralChatModel,
            ChatMessageRepository chatMessageRepository,
            InputValidationService inputValidationService) {
        this.mistralChatModel = mistralChatModel;
        this.chatMessageRepository = chatMessageRepository;
        this.inputValidationService = inputValidationService;
    }

    // Career counseling system prompt (100% Vietnamese, chi ti·∫øt nh∆∞ b·∫£n ti·∫øng Anh)
    private static final String SYSTEM_PROMPT = """
            B·∫°n l√† Meowl, c·ªë v·∫•n ngh·ªÅ nghi·ªáp AI th√¢n thi·ªán c·ªßa SkillVerse. üêæ
            NG√îN NG·ªÆ: Lu√¥n tr·∫£ l·ªùi 100% b·∫±ng TI·∫æNG VI·ªÜT chu·∫©n, c√≥ d·∫•u, d·ªÖ ƒë·ªçc. Ch·ªâ gi·ªØ v√†i t√™n ngh·ªÅ/c√¥ng ngh·ªá ti·∫øng Anh (Data Scientist, React, DevOps...).
            B·∫¢O V·ªÜ: N·∫øu ƒë·∫ßu v√†o v√¥ l√Ω (IELTS 10.0, th√¥ t·ª•c), t·ª´ ch·ªëi l·ªãch s·ª± v√† g·ª£i √Ω c√°ch nh·∫≠p h·ª£p l·ªá.

            B·ªêI C·∫¢NH 2025:
            - C·∫≠p nh·∫≠t xu h∆∞·ªõng vi·ªác l√†m, c√¥ng ngh·ªá, m·ª©c l∆∞∆°ng 2025; hybrid/remote ph·ªï bi·∫øn.
            - ∆Øu ti√™n c√¥ng ngh·ªá hi·ªán h√†nh; c√¥ng ngh·ªá c≈© ch·ªâ ƒë·ªÉ so s√°nh l·ªãch s·ª≠.

            C·∫§U TR√öC TR·∫¢ L·ªúI (d√πng Markdown, ti·∫øng Vi·ªát thu·∫ßn):

            ### üß≠ T·ªïng quan c√° nh√¢n h√≥a
            - T√≥m t·∫Øt c√¢u h·ªèi v√† m·ª•c ti√™u c·ªßa ng∆∞·ªùi d√πng (1‚Äì2 c√¢u)
            - G·ª£i √Ω ƒë·ªãnh h∆∞·ªõng ph√π h·ª£p d·ª±a tr√™n b·ªëi c·∫£nh/ng√†nh

            ### ‚úÖ L√Ω do n√™n theo ƒëu·ªïi
            - L·ª£i √≠ch 1 (k√®m v√≠ d·ª• ho·∫∑c s·ªë li·ªáu th·ª±c t·∫ø n·∫øu c√≥)
            - L·ª£i √≠ch 2 (nhu c·∫ßu tuy·ªÉn d·ª•ng/m·ª©c l∆∞∆°ng tham kh·∫£o 2025)
            - L·ª£i √≠ch 3 (c∆° h·ªôi thƒÉng ti·∫øn, ƒëa d·∫°ng vai tr√≤)

            ### ‚öñÔ∏è So s√°nh l·ª±a ch·ªçn/nh√°nh l·ªô tr√¨nh (n·∫øu ph√π h·ª£p)
            | Ti√™u ch√≠ | Ph∆∞∆°ng √°n A | Ph∆∞∆°ng √°n B | Ph√π h·ª£p v·ªõi |
            |---|---|---|---|
            | ƒê·ªô d·ªÖ h·ªçc | ‚úÖ D·ªÖ | ‚ùå Kh√≥ | Ng∆∞·ªùi m·ªõi |
            | C∆° h·ªôi vi·ªác l√†m | üî• Cao | üìâ Trung b√¨nh | 2025: A |
            | C√¥ng c·ª• | React, Spring | Django, Vue | ... |

            ### üöÄ L·ªô tr√¨nh h·ªçc theo m·ªëc th·ªùi gian
            1) Th√°ng 1: N·ªÅn t·∫£ng (ki·∫øn th·ª©c c·ªët l√µi, t√†i nguy√™n g·ª£i √Ω)
            2) Th√°ng 2‚Äì3: Th·ª±c h√†nh (mini project/portfolio, checklist k·ªπ nƒÉng)
            3) Th√°ng 4: Ch·ª©ng ch·ªâ/·ª©ng tuy·ªÉn (CV, GitHub, networking)

            ### üß© K·ªπ nƒÉng c·ªët l√µi & c√¥ng c·ª•
            - K·ªπ nƒÉng: thu·∫≠t to√°n, OOP, h·ªá th·ªëng, SQL/NoSQL, cloud c∆° b·∫£n...
            - C√¥ng c·ª•: Git/GitHub, Docker c∆° b·∫£n, CI/CD ƒë∆°n gi·∫£n...

            ### üí∞ M·ª©c l∆∞∆°ng tham kh·∫£o (n·∫øu li√™n quan)
            ```
            Fresher/Junior: [kho·∫£ng l∆∞∆°ng VNƒê]
            Mid-level: [kho·∫£ng l∆∞∆°ng VNƒê]
            Senior: [kho·∫£ng l∆∞∆°ng VNƒê]
            ```

            ### üìö T√†i nguy√™n g·ª£i √Ω (ch·ªçn l·ªçc)
            - 1‚Äì3 kh√≥a h·ªçc/channels/t√†i li·ªáu ch·∫•t l∆∞·ª£ng, ghi r√µ m·ª•c ƒë√≠ch s·ª≠ d·ª•ng

            ### ‚ö†Ô∏è R·ªßi ro & c√°ch kh·∫Øc ph·ª•c
            - R·ªßi ro A ‚Üí Gi·∫£i ph√°p ng·∫Øn g·ªçn
            - R·ªßi ro B ‚Üí Gi·∫£i ph√°p ng·∫Øn g·ªçn

            ### üí° L·ªùi khuy√™n c·ªßa Meowl
            - 1‚Äì2 c√¢u ƒë·ªãnh h∆∞·ªõng, ƒë·ªông vi√™n th·ª±c t·∫ø

            ### ‚ùìC√¢u h·ªèi ti·∫øp theo ƒë·ªÉ c√° nh√¢n h√≥a h∆°n
            - B·∫°n c√≥ bao nhi√™u th·ªùi gian m·ªói tu·∫ßn cho vi·ªác h·ªçc?
            - B·∫°n th√≠ch h∆∞·ªõng Frontend/Backend/Data/AI hay lƒ©nh v·ª±c kh√°c?
            - B·∫°n mu·ªën nh·∫Øm t·ªõi m·ª©c l∆∞∆°ng/m·ªëc th·ªùi gian n√†o?

            QUY T·∫ÆC TR√åNH B√ÄY:
            - D√πng ti√™u ƒë·ªÅ ###, danh s√°ch g·ªçn g√†ng, emoji v·ª´a ph·∫£i.
            - Lu√¥n c√≥ m·ª•c "‚ö†Ô∏è R·ªßi ro & c√°ch kh·∫Øc ph·ª•c" khi tr·∫£ l·ªùi chi ti·∫øt.
            - D√πng b·∫£ng khi so s√°nh; d√πng ``` cho d·ªØ li·ªáu ƒë·ªãnh d·∫°ng (m·ª©c l∆∞∆°ng,...).
            - K·∫øt th√∫c b·∫±ng 1‚Äì3 c√¢u h·ªèi ƒë·ªÉ ti·∫øp t·ª•c h·ªôi tho·∫°i.
            - 100% ti·∫øng Vi·ªát; ch·ªâ gi·ªØ t√™n ri√™ng ti·∫øng Anh khi c·∫ßn.
            """;

    /**
     * Process a chat message and get AI response
     */
    @Transactional
    public ChatResponse chat(ChatRequest request, User user) {
        // Validate user input (profanity, impossible targets like IELTS 10.0)
        try {
            inputValidationService.validateTextOrThrow(request.getMessage());
        } catch (IllegalArgumentException ex) {
            throw new ApiException(ErrorCode.BAD_REQUEST, ex.getMessage());
        }
        Long sessionId = request.getSessionId();

        // Generate new session ID if not provided
        if (sessionId == null) {
            sessionId = System.currentTimeMillis();
            log.info("Starting new chat session {} for user {}", sessionId, user.getId());
        }

        // Build conversation context
        List<ChatMessage> previousMessages = chatMessageRepository
                .findBySessionIdOrderByCreatedAtAsc(sessionId);

        // Call AI with automatic provider selection and fallback
        String aiResponse = callAIWithFallback(request.getMessage(), previousMessages);

        // Save to database
        ChatMessage chatMessage = ChatMessage.builder()
                .user(user)
                .sessionId(sessionId)
                .userMessage(request.getMessage())
                .aiResponse(aiResponse)
                .createdAt(LocalDateTime.now())
                .build();

        chatMessageRepository.save(chatMessage);

        log.info("Chat session {} - User: {}, AI response length: {}",
                sessionId, user.getId(), aiResponse.length());

        return ChatResponse.builder()
                .sessionId(sessionId)
                .message(request.getMessage())
                .aiResponse(aiResponse)
                .timestamp(chatMessage.getCreatedAt())
                .build();
    }

    /**
     * Call Mistral AI for chat using Spring AI
     * Using Mistral AI for latest 2025 career trends and insights
     */
    private String callAIWithFallback(String userMessage, List<ChatMessage> previousMessages) {
        log.info("Calling Mistral AI chatbot using Spring AI");

        try {
            return callMistralForChat(userMessage, previousMessages);
        } catch (Exception e) {
            log.error("Mistral AI failed: {}", e.getMessage());
            throw new ApiException(ErrorCode.SERVICE_UNAVAILABLE,
                    "AI chatbot service is temporarily unavailable. Please try again later.");
        }
    }

    /**
     * Call Mistral AI for chat conversation with context using Spring AI ChatClient
     * Mistral provides more recent training data for 2025 career trends
     */
    private String callMistralForChat(String userMessage, List<ChatMessage> previousMessages) {
        try {
            // Build conversation history
            StringBuilder contextBuilder = new StringBuilder();
            contextBuilder.append("Conversation history:\n");

            for (ChatMessage prev : previousMessages) {
                contextBuilder.append("User: ").append(prev.getUserMessage()).append("\n");
                contextBuilder.append("Assistant: ").append(prev.getAiResponse()).append("\n");
            }

            contextBuilder.append("User: ").append(userMessage);

            String conversationHistory = contextBuilder.toString();
            log.debug("Calling Mistral AI with {} previous messages", previousMessages.size());

            // Use Spring AI ChatClient for Mistral
            return ChatClient.builder(mistralChatModel)
                    .build()
                    .prompt()
                    .system(SYSTEM_PROMPT
                            + "\nCRITICAL: H√£y tr·∫£ l·ªùi b·∫±ng ƒë√∫ng ng√¥n ng·ªØ ng∆∞·ªùi d√πng ƒëang d√πng (∆∞u ti√™n Ti·∫øng Vi·ªát). N·∫øu ph√°t hi·ªán y√™u c·∫ßu v√¥ l√Ω (v√≠ d·ª• m·ª•c ti√™u IELTS 10.0), h√£y gi·∫£i th√≠ch v√† ƒë∆∞a g·ª£i √Ω h·ª£p l·ªá b·∫±ng Ti·∫øng Vi·ªát.")
                    .user(conversationHistory)
                    .call()
                    .content();

        } catch (Exception e) {
            log.error("Mistral chat error: {}", e.getMessage());
            throw new ApiException(ErrorCode.SERVICE_UNAVAILABLE,
                    "Mistral AI service unavailable: " + e.getMessage());
        }
    }

    /**
     * Get conversation history for a session
     */
    @Transactional(readOnly = true)
    public List<ChatMessage> getConversationHistory(Long sessionId, Long userId) {
        List<ChatMessage> messages = chatMessageRepository.findBySessionIdOrderByCreatedAtAsc(sessionId);

        // Verify user owns this session
        if (!messages.isEmpty() && !messages.get(0).getUser().getId().equals(userId)) {
            throw new ApiException(ErrorCode.FORBIDDEN, "Access denied to this conversation");
        }

        return messages;
    }

    /**
     * Get all session IDs for a user
     */
    @Transactional(readOnly = true)
    public List<Long> getUserSessions(Long userId) {
        return chatMessageRepository.findSessionIdsByUserId(userId);
    }
}

package com.exe.skillverse_backend.ai_service.service;

import com.exe.skillverse_backend.ai_service.dto.request.GenerateRoadmapRequest;
import com.exe.skillverse_backend.ai_service.dto.request.UpdateProgressRequest;
import com.exe.skillverse_backend.ai_service.dto.response.ProgressResponse;
import com.exe.skillverse_backend.ai_service.dto.response.RoadmapResponse;
import com.exe.skillverse_backend.ai_service.dto.response.RoadmapSessionSummary;
import com.exe.skillverse_backend.ai_service.dto.response.ValidationResult;
import com.exe.skillverse_backend.ai_service.entity.RoadmapSession;
import com.exe.skillverse_backend.ai_service.entity.UserRoadmapProgress;
import com.exe.skillverse_backend.ai_service.repository.RoadmapSessionRepository;
import com.exe.skillverse_backend.ai_service.repository.UserRoadmapProgressRepository;
import com.exe.skillverse_backend.auth_service.entity.User;
import com.exe.skillverse_backend.shared.exception.ApiException;
import com.exe.skillverse_backend.shared.exception.ErrorCode;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.ai.chat.client.ChatClient;
import org.springframework.ai.chat.model.ChatModel;
import org.springframework.ai.chat.model.ChatResponse;
import org.springframework.ai.chat.prompt.Prompt;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;

/**
 * Service for AI-powered roadmap generation using Spring AI with Gemini
 * Using Spring AI OpenAI client with Gemini's OpenAI-compatible API
 */
@Service
@Slf4j
public class AiRoadmapService {

    private final ChatModel geminiChatModel;
    private final RoadmapSessionRepository roadmapSessionRepository;
    private final UserRoadmapProgressRepository progressRepository;
    private final ObjectMapper objectMapper;
    private final InputValidationService inputValidationService;

    @Value("${spring.ai.openai.fallback-models:gemini-2.0-flash,gemini-1.5-flash}")
    private String fallbackModels;

    public AiRoadmapService(
            @Qualifier("geminiChatModel") ChatModel geminiChatModel,
            RoadmapSessionRepository roadmapSessionRepository,
            UserRoadmapProgressRepository progressRepository,
            ObjectMapper objectMapper,
            InputValidationService inputValidationService) {
        this.geminiChatModel = geminiChatModel;
        this.roadmapSessionRepository = roadmapSessionRepository;
        this.progressRepository = progressRepository;
        this.objectMapper = objectMapper;
        this.inputValidationService = inputValidationService;
    }

    /**
     * Pre-validate roadmap generation request without actually generating
     * 
     * @param request User request to validate
     * @return List of validation results (INFO/WARNING/ERROR severity)
     */
    public List<ValidationResult> preValidateRequest(GenerateRoadmapRequest request) {
        log.info("üîç Pre-validating request: goal='{}', duration='{}', experience='{}', style='{}'",
                request.getGoal(), request.getDuration(), request.getExperience(), request.getStyle());

        List<ValidationResult> results = new java.util.ArrayList<>();

        // üö® STAGE 1: AI Goal Validation (lightweight ~100 tokens)
        ValidationResult aiValidation = validateGoalWithAI(request.getGoal());
        results.add(aiValidation);

        // If goal is invalid, short-circuit to save tokens
        if (aiValidation.isError()) {
            log.error("‚ùå Goal rejected by AI: {}", aiValidation.getMessage());
            return results; // Don't proceed to expensive inputValidationService
        }

        // üîß STAGE 2: Input Validation (format, test scores, etc.)
        results.addAll(inputValidationService.validateWithWarnings(request));

        long errorCount = results.stream().filter(ValidationResult::isError).count();
        long warningCount = results.stream().filter(ValidationResult::isWarning).count();
        long infoCount = results.stream().filter(ValidationResult::isInfo).count();

        log.info("‚úÖ Validation complete: {} errors, {} warnings, {} info",
                errorCount, warningCount, infoCount);

        return results;
    }

    /**
     * Generate a personalized learning roadmap using Gemini AI (Schema V2)
     */
    @Transactional
    public RoadmapResponse generateRoadmap(GenerateRoadmapRequest request, User user) {
        log.info("üöÄ Generating roadmap V2 for user {} with goal: {}", user.getId(), request.getGoal());

        try {
            // Step 1: AI Goal Validation (CRITICAL - blocks invalid/malicious goals)
            ValidationResult aiValidation = validateGoalWithAI(request.getGoal());

            if (aiValidation.isError()) {
                log.error("‚ùå BLOCKED: Invalid goal from user {} - '{}'", user.getId(), request.getGoal());
                throw new ApiException(
                        ErrorCode.BAD_REQUEST,
                        "M·ª•c ti√™u kh√¥ng h·ª£p l·ªá: " + aiValidation.getMessage());
            }

            if (aiValidation.isWarning()) {
                log.warn("‚ö†Ô∏è WARNING: Vague goal from user {} - '{}' | {}",
                        user.getId(), request.getGoal(), aiValidation.getMessage());
                // Continue but log warning for monitoring
            }

            // Step 2: Format validation (throws on ERROR severity)
            inputValidationService.validateLearningGoalOrThrow(request.getGoal());
            inputValidationService.validateTextOrThrow(request.getDuration());
            inputValidationService.validateTextOrThrow(request.getExperience());
            inputValidationService.validateTextOrThrow(request.getStyle());

            // Step 3: Call Gemini API with comprehensive prompt
            String roadmapJson = callGeminiAPI(request);

            // Step 4: Parse and validate JSON (Schema V2)
            ParsedRoadmap parsed = validateAndParseRoadmapV2(roadmapJson);

            // Step 5: Extract statistics for database
            Integer totalNodes = parsed.statistics() != null ? parsed.statistics().getTotalNodes()
                    : parsed.nodes().size();
            Double totalHours = parsed.statistics() != null ? parsed.statistics().getTotalEstimatedHours()
                    : calculateTotalHours(parsed.nodes());

            // Step 6: Save to database with V2 schema
            RoadmapSession session = RoadmapSession.builder()
                    .user(user)
                    .schemaVersion(2)
                    // Metadata
                    .title(parsed.metadata().getTitle())
                    .originalGoal(parsed.metadata().getOriginalGoal())
                    .validatedGoal(parsed.metadata().getValidatedGoal())
                    .duration(parsed.metadata().getDuration())
                    .experienceLevel(parsed.metadata().getExperienceLevel())
                    .learningStyle(parsed.metadata().getLearningStyle())
                    // Statistics (for premium quota)
                    .totalNodes(totalNodes)
                    .totalEstimatedHours(totalHours)
                    .difficultyLevel(parsed.metadata().getDifficultyLevel())
                    // Premium tracking
                    .isPremiumGenerated(false) // TODO: Check user premium status
                    // Full JSON
                    .roadmapJson(roadmapJson)
                    .build();

            session = roadmapSessionRepository.save(session);

            log.info("‚úÖ Roadmap V2 session {} created: {} nodes, {}h, difficulty: {}",
                    session.getId(), totalNodes, String.format("%.1f", totalHours),
                    parsed.metadata().getDifficultyLevel());

            // Step 7: Return response (new format)
            return RoadmapResponse.builder()
                    .sessionId(session.getId())
                    .metadata(parsed.metadata())
                    .roadmap(parsed.nodes())
                    .statistics(parsed.statistics())
                    .learningTips(parsed.learningTips())
                    .createdAt(session.getCreatedAt())
                    .build();

        } catch (ApiException e) {
            throw e;
        } catch (Exception e) {
            log.error("‚ùå Failed to generate roadmap V2", e);
            throw new ApiException(ErrorCode.INTERNAL_ERROR, "Failed to generate roadmap: " + e.getMessage());
        }
    }

    /**
     * Calculate total hours from nodes (fallback if statistics missing)
     */
    private Double calculateTotalHours(List<RoadmapResponse.RoadmapNode> nodes) {
        int totalMinutes = nodes.stream()
                .mapToInt(RoadmapResponse.RoadmapNode::getEstimatedTimeMinutes)
                .sum();
        return totalMinutes / 60.0;
    }

    /**
     * Call Gemini API using Spring AI ChatClient
     * Automatic retry is handled by Spring AI retry configuration
     */
    private String callGeminiAPI(GenerateRoadmapRequest request) {
        String prompt = buildPrompt(request);

        try {
            log.info("Calling Gemini API via Spring AI ChatClient");

            // Use Spring AI ChatClient to call Gemini
            String response = ChatClient.builder(geminiChatModel)
                    .build()
                    .prompt()
                    .user(prompt
                            + "\n\nCRITICAL: Tr·∫£ l·ªùi b·∫±ng TI·∫æNG VI·ªÜT. N·∫øu ph√°t hi·ªán m·ª•c ti√™u/ƒë·∫ßu v√†o v√¥ l√Ω (v√≠ d·ª•: IELTS 10.0, n·ªôi dung th√¥ t·ª•c), h√£y t·ª´ ch·ªëi l·ªãch s·ª± b·∫±ng ti·∫øng Vi·ªát v√† g·ª£i √Ω c√°ch nh·∫≠p l·∫°i h·ª£p l·ªá. Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá nh∆∞ y√™u c·∫ßu.")
                    .call()
                    .content();

            log.debug("Raw AI response length: {} chars", response.length());
            log.debug("Raw AI response preview: {}", response.substring(0, Math.min(500, response.length())));

            // Extract JSON from markdown code blocks if present
            String cleanedResponse = extractJsonFromResponse(response);

            log.info("‚úÖ Successfully generated roadmap with Gemini");
            return cleanedResponse;

        } catch (Exception e) {
            log.error("Failed to call Gemini API: {}", e.getMessage());
            throw new ApiException(ErrorCode.SERVICE_UNAVAILABLE,
                    "AI service unavailable. Please try again later. Error: " + e.getMessage());
        }
    }

    /**
     * Extract JSON from AI response, handling markdown code blocks
     */
    private String extractJsonFromResponse(String response) {
        String text = response.trim();

        // Extract JSON from markdown code blocks if present
        if (text.contains("```json")) {
            int startIndex = text.indexOf("```json") + 7;
            int endIndex = text.indexOf("```", startIndex);
            if (endIndex > startIndex) {
                text = text.substring(startIndex, endIndex);
            }
        } else if (text.contains("```")) {
            int startIndex = text.indexOf("```") + 3;
            int endIndex = text.indexOf("```", startIndex);
            if (endIndex > startIndex) {
                text = text.substring(startIndex, endIndex);
            }
        }

        String cleanedText = text.trim();
        log.info("Extracted JSON length: {} chars", cleanedText.length());
        log.debug("Extracted JSON preview: {}", cleanedText.substring(0, Math.min(300, cleanedText.length())));

        return cleanedText;
    }

    /**
     * Build comprehensive prompt for Gemini using System Prompt V2
     * Includes: Pattern Detection, Validation Framework, Adaptation Logic
     */
    private String buildPrompt(GenerateRoadmapRequest request) {
        // Build the comprehensive system prompt
        String systemPrompt = buildSystemPromptV2(request);

        // Add user input context
        String userContext = String.format("""

                === USER INPUT ===
                Goal: %s
                Duration: %s
                Experience Level: %s
                Learning Style: %s

                === YOUR TASK ===
                Analyze the goal above using Pattern Detection Engine (99%% accuracy).
                Validate using Validation Framework (check scores, deprecated tech, time feasibility).
                Generate roadmap adapted to experience level and learning style.
                Return ONLY valid JSON following the exact format specified above.

                CRITICAL: Response must be pure JSON starting with { and ending with }.
                NO markdown, NO explanations, ONLY JSON.
                """,
                request.getGoal(),
                request.getDuration(),
                request.getExperience(),
                request.getStyle());

        return systemPrompt + userContext;
    }

    /**
     * Build System Prompt V2 - Comprehensive AI Roadmap Architect Instructions
     */
    private String buildSystemPromptV2(GenerateRoadmapRequest request) {
        return """
                # AI ROADMAP ARCHITECT - SYSTEM PROMPT V2

                ## VAI TR√í & S·ª® M·ªÜNH
                B·∫°n l√† AI Roadmap Architect - Chuy√™n gia thi·∫øt k·∫ø l·ªô tr√¨nh h·ªçc t·∫≠p:
                - Ph√°t hi·ªán 99%% √Ω ƒë·ªãnh h·ªçc t·∫≠p t·ª´ vƒÉn b·∫£n t·ª± nhi√™n
                - X√°c th·ª±c th√¥ng tin v·ªõi ƒë·ªô ch√≠nh x√°c cao
                - T·∫°o l·ªô tr√¨nh c·∫•u tr√∫c c√¢y (tree) t·ªëi ∆∞u
                - Tr·∫£ v·ªÅ JSON chu·∫©n, KH√îNG chat hay h·ªèi han

                ## PATTERN DETECTION - B·∫ÆT √ù ƒê·ªäNH H·ªåC T·∫¨P

                ### √ù ƒë·ªãnh tr·ª±c ti·∫øp:
                - "h·ªçc [X]" ‚Üí H·ªçc Python, h·ªçc ti·∫øng Anh
                - "mu·ªën h·ªçc [X]" ‚Üí Mu·ªën h·ªçc design
                - "l·ªô tr√¨nh [X]" ‚Üí L·ªô tr√¨nh h·ªçc AI
                - "t·ª± h·ªçc [X]" ‚Üí T·ª± h·ªçc machine learning

                ### √ù ƒë·ªãnh gi√°n ti·∫øp (QUAN TR·ªåNG):
                - "mu·ªën [ƒë·ªông t·ª´]" ‚Üí "mu·ªën thi·∫øt k·∫ø" = H·ªçc thi·∫øt k·∫ø
                - "mu·ªën [c√¥ng c·ª•]" ‚Üí "mu·ªën Canva" = H·ªçc Canva
                - "l√†m sao ƒë·ªÉ [X]" ‚Üí "l√†m sao ƒë·ªÉ code game" = H·ªçc game programming
                - "tr·ªü th√†nh [ngh·ªÅ]" ‚Üí "tr·ªü th√†nh Backend Developer" = L·ªô tr√¨nh Backend
                - Ch·ªâ t√™n c√¥ng c·ª• ‚Üí "Canva" = H·ªçc Canva
                - "thi [k·ª≥ thi]" ‚Üí "thi IELTS" = L·ªô tr√¨nh IELTS

                ### VALIDATION RULES:
                - IELTS: max 9.0 (n·∫øu > 9.0 ‚Üí ƒëi·ªÅu ch·ªânh, ghi validation_notes)
                - TOEIC: max 990
                - TOEFL iBT: max 120
                - C√¥ng ngh·ªá l·ªói th·ªùi (Flash, AngularJS 1.x...) ‚Üí G·ª£i √Ω thay th·∫ø

                ## OUTPUT FORMAT SPECIFICATION

                CRITICAL: Tr·∫£ v·ªÅ ƒê√öNG format JSON sau (kh√¥ng th√™m/b·ªõt field):

                ```json
                {
                  "roadmap_metadata": {
                    "title": "T√™n l·ªô tr√¨nh (Ti·∫øng Vi·ªát c√≥ d·∫•u)",
                    "original_goal": "M·ª•c ti√™u g·ªëc t·ª´ user (kh√¥ng thay ƒë·ªïi)",
                    "validated_goal": "M·ª•c ti√™u ƒë√£ l√†m r√µ/ƒëi·ªÅu ch·ªânh",
                    "duration": "3 th√°ng | 6 tu·∫ßn | 2 ng√†y (Ti·∫øng Vi·ªát)",
                    "experience_level": "M·ªõi b·∫Øt ƒë·∫ßu | Trung c·∫•p | N√¢ng cao | Chuy√™n gia",
                    "learning_style": "Theo d·ª± √°n - H·ªçc b·∫±ng c√°ch l√†m | L√Ω thuy·∫øt tr∆∞·ªõc - Hi·ªÉu r·ªìi l√†m | Th·ª±c h√†nh tr·ª±c ti·∫øp",
                    "detected_intention": "Ng∆∞·ªùi d√πng mu·ªën h·ªçc [X] ƒë·ªÉ [Y]",
                    "validation_notes": "null ho·∫∑c gi·∫£i th√≠ch ƒëi·ªÅu ch·ªânh",
                    "estimated_completion": "Th·ªùi gian th·ª±c t·∫ø n·∫øu kh√°c duration (Ti·∫øng Vi·ªát)",
                    "difficulty_level": "beginner | intermediate | advanced | expert",
                    "prerequisites": ["Ki·∫øn th·ª©c c·∫ßn c√≥ tr∆∞·ªõc"],
                    "career_relevance": "Li√™n quan ngh·ªÅ nghi·ªáp"
                  },
                  "roadmap": [
                    {
                      "id": "quest-[m√¥-t·∫£-ng·∫Øn]",
                      "title": "Ti√™u ƒë·ªÅ (Ti·∫øng Vi·ªát c√≥ d·∫•u, 40-80 k√Ω t·ª±)",
                      "description": "M√¥ t·∫£ 2-4 c√¢u: H·ªçc g√¨, ƒë·∫°t g√¨, t·∫°i sao quan tr·ªçng",
                      "estimated_time_minutes": 180,
                      "type": "MAIN",
                      "difficulty": "easy | medium | hard",
                      "learning_objectives": [
                        "M·ª•c ti√™u c·ª• th·ªÉ ƒëo l∆∞·ªùng ƒë∆∞·ª£c",
                        "T·∫°o ƒë∆∞·ª£c [X], Hi·ªÉu v√† gi·∫£i th√≠ch ƒë∆∞·ª£c [Y]"
                      ],
                      "key_concepts": ["Kh√°i ni·ªám 1", "Kh√°i ni·ªám 2"],
                      "practical_exercises": [
                        "B√†i t·∫≠p c·ª• th·ªÉ 1",
                        "D·ª± √°n mini 2"
                      ],
                      "suggested_resources": [
                        "FreeCodeCamp - Responsive Web Design",
                        "MDN Web Docs - HTML Basics",
                        "YouTube - Traversy Media - React Course"
                      ],
                      "success_criteria": [
                        "Ti√™u ch√≠ ƒë√°nh gi√° ho√†n th√†nh 1",
                        "Ti√™u ch√≠ 2"
                      ],
                      "prerequisites": ["quest-id-1"],
                      "children": ["quest-id-2"],
                      "estimated_completion_rate": "90%%"
                    }
                  ],
                  "roadmap_statistics": {
                    "total_nodes": 12,
                    "main_nodes": 8,
                    "side_nodes": 4,
                    "total_estimated_hours": 48.5,
                    "difficulty_distribution": {
                      "easy": 4,
                      "medium": 6,
                      "hard": 2
                    }
                  },
                  "learning_tips": [
                    "Tip 1: L·ªùi khuy√™n h·ªçc t·∫≠p ph√π h·ª£p v·ªõi learning style",
                    "Tip 2: Best practice cho goal n√†y"
                  ]
                }
                ```

                ## QUY T·∫ÆC ROADMAP CONSTRUCTION

                ### Node Structure:
                - 10-15 nodes (b·∫Øt bu·ªôc)
                - 2-3 root nodes (kh√¥ng c√≥ prerequisites)
                - Main path ‚â• 6 nodes

                ### Node Types by Experience:
                - M·ªõi b·∫Øt ƒë·∫ßu: 75%% MAIN, 25%% SIDE (difficulty: 60%% easy, 30%% medium, 10%% hard)
                - Bi·∫øt m·ªôt √≠t: 65%% MAIN, 35%% SIDE (difficulty: 30%% easy, 50%% medium, 20%% hard)
                - Trung c·∫•p: 55%% MAIN, 45%% SIDE (difficulty: 20%% medium, 60%% hard, 20%% expert)
                - N√¢ng cao: 45%% MAIN, 55%% SIDE (difficulty: 10%% hard, 70%% expert, 20%% research)

                ### Time Allocation:
                - 2 tu·∫ßn = 1680 ph√∫t | 1 th√°ng = 3600 ph√∫t | 3 th√°ng = 10800 ph√∫t | 6 th√°ng = 21600 ph√∫t | 1 nƒÉm = 43200 ph√∫t
                - T·ªïng th·ªùi gian nodes ‚âà 80-100%% total (20%% buffer)

                ### Graph Integrity:
                - M·ªçi node (tr·ª´ ROOT) PH·∫¢I c√≥ prerequisites
                - M·ªçi ID trong prerequisites/children PH·∫¢I t·ªìn t·∫°i
                - KH√îNG circular dependencies
                - KH√îNG orphan nodes

                ## ADAPTATION BY LEARNING STYLE

                ### "Theo d·ª± √°n - H·ªçc b·∫±ng c√°ch l√†m":
                - M·ªói chu·ªói MAIN = 1 complete project
                - M·ªói node = 1 feature/component
                - Description format: "X√¢y d·ª±ng [feature X] cho project..."

                ### "L√Ω thuy·∫øt - N·∫Øm v·ªØng kh√°i ni·ªám":
                - Concept-driven approach
                - Theory ‚Üí Practice cycle
                - Description format: "Hi·ªÉu v·ªÅ [concept X]. Sau node n√†y b·∫°n s·∫Ω..."

                ### "Video - H·ªçc qua h√¨nh ·∫£nh":
                - Video-first approach
                - Description format: "Xem video [X] t·ª´ [platform]. Sau ƒë√≥ th·ª±c h√†nh..."

                ### "Th·ª±c h√†nh - T∆∞∆°ng t√°c nhi·ªÅu":
                - Exercise-heavy
                - Description format: "Ho√†n th√†nh [N] b√†i t·∫≠p v·ªÅ [topic]..."

                ### "C√¢n b·∫±ng - L√Ω thuy·∫øt + Th·ª±c h√†nh":
                - 50%% theory, 50%% practice
                - Alternating pattern
                - Description format: "Ph·∫ßn l√Ω thuy·∫øt:... Ph·∫ßn th·ª±c h√†nh:..."

                ## CONTENT QUALITY STANDARDS

                ### Title Quality:
                ‚úÖ GOOD: "L√†m quen v·ªõi HTML5 v√† c·∫•u tr√∫c web", "X√¢y d·ª±ng API RESTful v·ªõi Spring Boot"
                ‚ùå BAD: "B∆∞·ªõc 1", "H·ªçc JavaScript", "Module 3"
                - B·∫Øt ƒë·∫ßu b·∫±ng ƒë·ªông t·ª´ h√†nh ƒë·ªông
                - Ch·ª©a c√¥ng ngh·ªá/k·ªπ nƒÉng c·ª• th·ªÉ
                - 40-80 k√Ω t·ª±, Ti·∫øng Vi·ªát c√≥ d·∫•u

                ### Learning Objectives:
                ‚úÖ GOOD: "T·∫°o ƒë∆∞·ª£c form ƒëƒÉng k√Ω c√≥ validation", "X√¢y d·ª±ng ƒë∆∞·ª£c 3 component React"
                ‚ùå BAD: "Hi·ªÉu v·ªÅ React", "Gi·ªèi JavaScript"
                - Format: "[ƒê·ªông t·ª´] ƒë∆∞·ª£c [K·∫øt qu·∫£ c·ª• th·ªÉ]"

                ### Suggested Resources:
                ‚úÖ GOOD: "MDN Web Docs - HTML Basics", "FreeCodeCamp - Responsive Web Design"
                ‚ùå BAD: "Kh√≥a h·ªçc ABC", "Video h∆∞·ªõng d·∫´n"
                - T√†i nguy√™n C√ì TH·∫¨T, PH·ªî BI·∫æN, CH·∫§T L∆Ø·ª¢NG

                ## CRITICAL REQUIREMENTS

                1. NEVER ASK QUESTIONS - Just generate roadmap from input
                2. ALWAYS VALIDATE - Scores, deprecated tech, time feasibility
                3. HIGH-QUALITY CONTENT - Clear titles, specific objectives, real resources
                4. PERFECT JSON - Valid format, no markdown wrapper, UTF-8, Ti·∫øng Vi·ªát c√≥ d·∫•u
                5. RETURN ONLY JSON - No text before or after the JSON object

                ## SELF-VALIDATION CHECKLIST

                Tr∆∞·ªõc khi tr·∫£ v·ªÅ, ki·ªÉm tra:
                ‚ñ° Detect ƒë√∫ng learning intention?
                ‚ñ° Validate goal? (scores, tech, time)
                ‚ñ° S·ªë nodes: 10-15?
                ‚ñ° Main path ‚â• 6 nodes?
                ‚ñ° M·ªçi ID t·ªìn t·∫°i?
                ‚ñ° Kh√¥ng orphan nodes?
                ‚ñ° T·ªïng th·ªùi gian ‚âà duration?
                ‚ñ° Ti·∫øng Vi·ªát c√≥ d·∫•u?
                ‚ñ° JSON valid, no markdown wrapper?

                """;
    }

    /**
     * Validate and parse enhanced roadmap JSON (Schema V2)
     * Parses: metadata, roadmap nodes, statistics, learning tips
     */
    private ParsedRoadmap validateAndParseRoadmapV2(String roadmapJson) {
        try {
            JsonNode root = objectMapper.readTree(roadmapJson);

            // Parse metadata
            JsonNode metadataNode = root.path("roadmap_metadata");
            if (metadataNode.isMissingNode()) {
                throw new ApiException(ErrorCode.BAD_REQUEST,
                        "Invalid roadmap structure: missing 'roadmap_metadata'");
            }
            RoadmapResponse.RoadmapMetadata metadata = parseMetadata(metadataNode);

            // Parse roadmap nodes
            JsonNode roadmapArray = root.path("roadmap");
            if (!roadmapArray.isArray() || roadmapArray.isEmpty()) {
                throw new ApiException(ErrorCode.BAD_REQUEST,
                        "Invalid roadmap structure: missing or empty 'roadmap' array");
            }
            List<RoadmapResponse.RoadmapNode> nodes = parseNodes(roadmapArray);

            // Parse statistics
            JsonNode statsNode = root.path("roadmap_statistics");
            RoadmapResponse.RoadmapStatistics statistics = statsNode.isMissingNode() ? null
                    : parseStatistics(statsNode);

            // Parse learning tips
            List<String> learningTips = new ArrayList<>();
            JsonNode tipsNode = root.path("learning_tips");
            if (tipsNode.isArray()) {
                for (JsonNode tip : tipsNode) {
                    learningTips.add(tip.asText());
                }
            }

            log.info("‚úÖ Validated roadmap V2: {} nodes, difficulty: {}",
                    nodes.size(), metadata.getDifficultyLevel());

            return new ParsedRoadmap(metadata, nodes, statistics, learningTips);

        } catch (JsonProcessingException e) {
            log.error("‚ùå Failed to parse roadmap JSON V2", e);
            throw new ApiException(ErrorCode.BAD_REQUEST,
                    "AI generation failed: invalid JSON format. Please retry.");
        }
    }

    /**
     * Parse roadmap metadata
     */
    private RoadmapResponse.RoadmapMetadata parseMetadata(JsonNode node) {
        return RoadmapResponse.RoadmapMetadata.builder()
                .title(node.path("title").asText())
                .originalGoal(node.path("original_goal").asText())
                .validatedGoal(node.path("validated_goal").asText())
                .duration(node.path("duration").asText())
                .experienceLevel(node.path("experience_level").asText())
                .learningStyle(node.path("learning_style").asText())
                .detectedIntention(node.path("detected_intention").asText(""))
                .validationNotes(node.path("validation_notes").isNull() ? null : node.path("validation_notes").asText())
                .estimatedCompletion(node.path("estimated_completion").asText(null))
                .difficultyLevel(node.path("difficulty_level").asText("medium"))
                .prerequisites(parseStringArray(node.path("prerequisites")))
                .careerRelevance(node.path("career_relevance").asText(null))
                .build();
    }

    /**
     * Parse roadmap nodes with enhanced fields
     */
    private List<RoadmapResponse.RoadmapNode> parseNodes(JsonNode nodesArray) {
        List<RoadmapResponse.RoadmapNode> nodes = new ArrayList<>();

        for (JsonNode nodeJson : nodesArray) {
            // Validate required fields
            if (!nodeJson.has("id") || !nodeJson.has("title") || !nodeJson.has("type")) {
                throw new ApiException(ErrorCode.BAD_REQUEST,
                        "Invalid node: missing required fields (id, title, type)");
            }

            // Parse type enum
            String typeStr = nodeJson.path("type").asText();
            RoadmapResponse.RoadmapNode.NodeType type;
            try {
                type = RoadmapResponse.RoadmapNode.NodeType.valueOf(typeStr);
            } catch (IllegalArgumentException e) {
                throw new ApiException(ErrorCode.BAD_REQUEST,
                        "Invalid node type: " + typeStr + ". Must be MAIN or SIDE");
            }

            RoadmapResponse.RoadmapNode node = RoadmapResponse.RoadmapNode.builder()
                    .id(nodeJson.path("id").asText())
                    .title(nodeJson.path("title").asText())
                    .description(nodeJson.path("description").asText(""))
                    .estimatedTimeMinutes(nodeJson.path("estimated_time_minutes").asInt(0))
                    .type(type)
                    .difficulty(nodeJson.path("difficulty").asText("medium"))
                    .learningObjectives(parseStringArray(nodeJson.path("learning_objectives")))
                    .keyConcepts(parseStringArray(nodeJson.path("key_concepts")))
                    .practicalExercises(parseStringArray(nodeJson.path("practical_exercises")))
                    .suggestedResources(parseStringArray(nodeJson.path("suggested_resources")))
                    .successCriteria(parseStringArray(nodeJson.path("success_criteria")))
                    .prerequisites(parseStringArray(nodeJson.path("prerequisites")))
                    .children(parseStringArray(nodeJson.path("children")))
                    .estimatedCompletionRate(nodeJson.path("estimated_completion_rate").asText(null))
                    .build();

            nodes.add(node);
        }

        return nodes;
    }

    /**
     * Parse roadmap statistics
     */
    private RoadmapResponse.RoadmapStatistics parseStatistics(JsonNode node) {
        Map<String, Integer> difficultyDistribution = new HashMap<>();
        JsonNode distNode = node.path("difficulty_distribution");
        if (distNode.isObject()) {
            // Use fieldNames() instead of deprecated fields()
            Iterator<String> fieldNames = distNode.fieldNames();
            fieldNames.forEachRemaining(
                    fieldName -> difficultyDistribution.put(fieldName, distNode.get(fieldName).asInt()));
        }

        return RoadmapResponse.RoadmapStatistics.builder()
                .totalNodes(node.path("total_nodes").asInt(0))
                .mainNodes(node.path("main_nodes").asInt(0))
                .sideNodes(node.path("side_nodes").asInt(0))
                .totalEstimatedHours(node.path("total_estimated_hours").asDouble(0.0))
                .difficultyDistribution(difficultyDistribution)
                .build();
    }

    /**
     * Helper: Parse JSON array to List<String>
     */
    private List<String> parseStringArray(JsonNode arrayNode) {
        List<String> result = new ArrayList<>();
        if (arrayNode.isArray()) {
            for (JsonNode item : arrayNode) {
                result.add(item.asText());
            }
        }
        return result;
    }

    /**
     * Helper class to hold parsed roadmap data
     */
    private record ParsedRoadmap(
            RoadmapResponse.RoadmapMetadata metadata,
            List<RoadmapResponse.RoadmapNode> nodes,
            RoadmapResponse.RoadmapStatistics statistics,
            List<String> learningTips) {
    }

    /**
     * Generate a readable title from goal and duration
     */
    /**
     * Get all roadmap sessions for a user
     */
    @Transactional(readOnly = true)
    public List<RoadmapSessionSummary> getUserRoadmaps(Long userId) {
        List<RoadmapSession> sessions = roadmapSessionRepository.findByUserIdOrderByCreatedAtDesc(userId);
        List<RoadmapSessionSummary> summaries = new ArrayList<>();

        for (RoadmapSession session : sessions) {
            // Parse roadmap JSON to count total quests
            int totalQuests = 0;
            try {
                // Support both V1 and V2 schema
                JsonNode root = objectMapper.readTree(session.getRoadmapJson());
                JsonNode roadmapArray = root.path("roadmap");
                totalQuests = roadmapArray.size();

                // Fallback: if roadmap is empty, try using totalNodes from DB (V2 only)
                if (totalQuests == 0 && session.getTotalNodes() != null) {
                    totalQuests = session.getTotalNodes();
                }
            } catch (JsonProcessingException e) {
                log.warn("Failed to parse roadmap JSON for session {}", session.getId());
                // Fallback to DB field
                if (session.getTotalNodes() != null) {
                    totalQuests = session.getTotalNodes();
                }
            }

            // Count completed quests
            Long completedCount = progressRepository.countCompletedBySessionId(session.getId());
            int completed = completedCount != null ? completedCount.intValue() : 0;

            // Calculate progress percentage
            int progressPercentage = totalQuests > 0 ? (completed * 100) / totalQuests : 0;

            // Build summary with V2 fields (fallback to V1 for old data)
            @SuppressWarnings("deprecation") // Intentional V1 fallback for backward compatibility
            RoadmapSessionSummary summary = RoadmapSessionSummary.builder()
                    .sessionId(session.getId())
                    .title(session.getTitle())
                    // Use V2 fields with fallback to deprecated V1 fields
                    .originalGoal(session.getOriginalGoal() != null ? session.getOriginalGoal() : session.getGoal())
                    .validatedGoal(session.getValidatedGoal())
                    .duration(session.getDuration())
                    .experienceLevel(session.getExperienceLevel() != null ? session.getExperienceLevel()
                            : session.getExperience())
                    .learningStyle(session.getLearningStyle() != null ? session.getLearningStyle() : session.getStyle())
                    .totalQuests(totalQuests)
                    .completedQuests(completed)
                    .progressPercentage(progressPercentage)
                    .difficultyLevel(session.getDifficultyLevel())
                    .schemaVersion(session.getSchemaVersion())
                    .createdAt(session.getCreatedAt())
                    .build();

            summaries.add(summary);
        }

        return summaries;
    }

    /**
     * Get a specific roadmap session with full details (supports V1 and V2 schemas)
     */
    @Transactional(readOnly = true)
    public RoadmapResponse getRoadmapById(Long sessionId, Long userId) {
        RoadmapSession session = roadmapSessionRepository.findByIdAndUserId(sessionId, userId)
                .orElseThrow(() -> new ApiException(ErrorCode.NOT_FOUND, "Roadmap not found"));

        // Detect schema version and parse accordingly
        Integer schemaVersion = session.getSchemaVersion() != null ? session.getSchemaVersion() : 1;

        if (schemaVersion >= 2) {
            // V2: Parse full structure
            ParsedRoadmap parsed = validateAndParseRoadmapV2(session.getRoadmapJson());

            return RoadmapResponse.builder()
                    .sessionId(session.getId())
                    .metadata(parsed.metadata())
                    .roadmap(parsed.nodes())
                    .statistics(parsed.statistics())
                    .learningTips(parsed.learningTips())
                    .createdAt(session.getCreatedAt())
                    .build();
        } else {
            // V1 Legacy: Convert to V2 format (best-effort)
            log.warn("üîÑ Converting legacy V1 roadmap {} to V2 format", sessionId);

            List<RoadmapResponse.RoadmapNode> nodes = parseNodesFromV1Json(session.getRoadmapJson());

            // Build minimal V2 metadata from V1 data (suppress deprecation for V1 fallback)
            @SuppressWarnings("deprecation")
            RoadmapResponse.RoadmapMetadata metadata = RoadmapResponse.RoadmapMetadata.builder()
                    .title(session.getTitle())
                    .originalGoal(session.getGoal() != null ? session.getGoal() : "Unknown")
                    .validatedGoal(null)
                    .duration(session.getDuration())
                    .experienceLevel(session.getExperience() != null ? session.getExperience() : "beginner")
                    .learningStyle(session.getStyle() != null ? session.getStyle() : "visual")
                    .difficultyLevel("intermediate") // default
                    .build();

            // Build minimal statistics
            RoadmapResponse.RoadmapStatistics statistics = RoadmapResponse.RoadmapStatistics.builder()
                    .totalNodes(nodes.size())
                    .mainNodes(nodes.size())
                    .sideNodes(0)
                    .totalEstimatedHours(calculateTotalHours(nodes))
                    .build();

            return RoadmapResponse.builder()
                    .sessionId(session.getId())
                    .metadata(metadata)
                    .roadmap(nodes)
                    .statistics(statistics)
                    .learningTips(List.of()) // Empty list for V1 data
                    .createdAt(session.getCreatedAt())
                    .build();
        }
    }

    /**
     * Parse V1 roadmap JSON (backward compatibility)
     */
    private List<RoadmapResponse.RoadmapNode> parseNodesFromV1Json(String roadmapJson) {
        try {
            JsonNode root = objectMapper.readTree(roadmapJson);
            JsonNode roadmapArray = root.path("roadmap");

            if (!roadmapArray.isArray()) {
                throw new ApiException(ErrorCode.BAD_REQUEST,
                        "V1 roadmap field must be an array");
            }

            // Parse V1 nodes (simpler structure)
            return parseNodes(roadmapArray);

        } catch (JsonProcessingException e) {
            log.error("Failed to parse V1 roadmap JSON", e);
            throw new ApiException(ErrorCode.BAD_REQUEST,
                    "Invalid V1 JSON format: " + e.getMessage());
        }
    }

    /**
     * Update quest/milestone progress for a roadmap session
     */
    @Transactional
    public ProgressResponse updateProgress(Long sessionId, Long userId, UpdateProgressRequest request) {
        log.info("Updating progress for session {} - quest: {}, completed: {}",
                sessionId, request.getQuestId(), request.getCompleted());

        // Verify session belongs to user
        RoadmapSession session = roadmapSessionRepository.findByIdAndUserId(sessionId, userId)
                .orElseThrow(() -> new ApiException(ErrorCode.NOT_FOUND, "Roadmap not found"));

        // Find or create progress record
        UserRoadmapProgress progress = progressRepository
                .findBySessionIdAndQuestId(sessionId, request.getQuestId())
                .orElse(UserRoadmapProgress.builder()
                        .roadmapSession(session)
                        .questId(request.getQuestId())
                        .status(UserRoadmapProgress.ProgressStatus.NOT_STARTED)
                        .build());

        // Update completion status
        if (request.getCompleted()) {
            progress.setStatus(UserRoadmapProgress.ProgressStatus.COMPLETED);
            progress.setProgress(100);
            progress.setCompletedAt(java.time.Instant.now());
        } else {
            progress.setStatus(UserRoadmapProgress.ProgressStatus.NOT_STARTED);
            progress.setProgress(0);
            progress.setCompletedAt(null);
        }

        progressRepository.save(progress);

        // Calculate progress statistics (support V1 and V2)
        int totalQuests = 0;
        try {
            Integer schemaVersion = session.getSchemaVersion() != null ? session.getSchemaVersion() : 1;

            if (schemaVersion >= 2) {
                // V2: Parse or use cached totalNodes from DB
                if (session.getTotalNodes() != null) {
                    totalQuests = session.getTotalNodes();
                } else {
                    ParsedRoadmap parsed = validateAndParseRoadmapV2(session.getRoadmapJson());
                    totalQuests = parsed.nodes().size();
                }
            } else {
                // V1: Parse nodes
                List<RoadmapResponse.RoadmapNode> nodes = parseNodesFromV1Json(session.getRoadmapJson());
                totalQuests = nodes.size();
            }
        } catch (Exception e) {
            log.warn("Failed to determine totalQuests for session {}, using progress entries count", session.getId());
            List<UserRoadmapProgress> allProgress = progressRepository.findBySessionId(sessionId);
            totalQuests = allProgress.size(); // Fallback: count all progress entries
        }

        List<UserRoadmapProgress> allProgress = progressRepository.findBySessionId(sessionId);
        int completedQuests = (int) allProgress.stream()
                .filter(p -> p.getStatus() == UserRoadmapProgress.ProgressStatus.COMPLETED)
                .count();

        double completionPercentage = totalQuests > 0
                ? (completedQuests * 100.0 / totalQuests)
                : 0.0;

        log.info("Progress updated - {}/{} quests completed ({}%)",
                completedQuests, totalQuests, String.format("%.1f", completionPercentage));

        return ProgressResponse.builder()
                .sessionId(sessionId)
                .questId(request.getQuestId())
                .completed(request.getCompleted())
                .stats(ProgressResponse.ProgressStats.builder()
                        .totalQuests(totalQuests)
                        .completedQuests(completedQuests)
                        .completionPercentage(completionPercentage)
                        .build())
                .build();
    }

    /**
     * Validate learning goal with AI (Stage 1 - Lightweight Validation)
     * Prevents wasting tokens on invalid/inappropriate goals
     * 
     * @param goal User's learning goal
     * @return ValidationResult with severity INFO/WARNING/ERROR
     */
    private ValidationResult validateGoalWithAI(String goal) {
        log.info("ü§ñ AI Goal Validation Stage 1: Checking goal='{}'", goal);

        String validationPrompt = buildGoalValidationPrompt(goal);

        try {
            // Use Spring AI ChatModel for validation
            ChatResponse response = geminiChatModel.call(new Prompt(validationPrompt));
            String aiResponse = response.getResult().getOutput().getContent().trim();

            log.debug("AI Validation Response: {}", aiResponse);

            // Parse AI response
            return parseAIValidationResponse(aiResponse, goal);

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è AI validation failed, falling back to basic validation: {}", e.getMessage());

            // Fallback: Basic validation if AI fails
            if (goal == null || goal.trim().isEmpty()) {
                return ValidationResult.error("goal", "M·ª•c ti√™u h·ªçc t·∫≠p kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
                        "Vui l√≤ng nh·∫≠p m·ª•c ti√™u h·ªçc t·∫≠p c·ªßa b·∫°n");
            }

            if (goal.trim().length() < 5) {
                return ValidationResult.error("goal",
                        "M·ª•c ti√™u qu√° ng·∫Øn. Vui l√≤ng m√¥ t·∫£ r√µ h∆°n b·∫°n mu·ªën h·ªçc g√¨.",
                        "V√≠ d·ª•: 'H·ªçc Python', 'Tr·ªü th√†nh UX Designer'");
            }

            // Allow request to proceed if AI validation fails
            return ValidationResult.info("goal",
                    "Kh√¥ng th·ªÉ x√°c th·ª±c b·∫±ng AI, ti·∫øp t·ª•c v·ªõi validation c∆° b·∫£n", null);
        }
    }

    /**
     * Build prompt for AI goal validation (Stage 1)
     */
    private String buildGoalValidationPrompt(String goal) {
        return String.format(
                """
                        # NHI·ªÜM V·ª§: X√ÅC TH·ª∞C M·ª§C TI√äU H·ªåC T·∫¨P

                        B·∫°n l√† AI validator chuy√™n ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa m·ª•c ti√™u h·ªçc t·∫≠p.

                        ## M·ª§C TI√äU C·∫¶N KI·ªÇM TRA:
                        "%s"

                        ## TI√äU CH√ç ƒê√ÅNH GI√Å:

                        ### ‚úÖ H·ª¢P L·ªÜ N√ïU:
                        1. Li√™n quan ƒë·∫øn h·ªçc t·∫≠p, gi√°o d·ª•c, ph√°t tri·ªÉn k·ªπ nƒÉng
                        2. C√≥ th·ªÉ t·∫°o l·ªô tr√¨nh h·ªçc t·∫≠p (h·ªçc ng√¥n ng·ªØ l·∫≠p tr√¨nh, c√¥ng ngh·ªá, k·ªπ nƒÉng m·ªÅm, ngh·ªÅ nghi·ªáp)
                        3. M·ª•c ƒë√≠ch t√≠ch c·ª±c, x√¢y d·ª±ng
                        4. R√µ r√†ng ho·∫∑c c√≥ th·ªÉ hi·ªÉu ƒë∆∞·ª£c √Ω ƒë·ªãnh

                        ### ‚ùå KH√îNG H·ª¢P L·ªÜ N·ªêI:
                        1. Vi ph·∫°m ƒë·∫°o ƒë·ª©c: b·∫°o l·ª±c, l·ª´a ƒë·∫£o, hack b·∫•t h·ª£p ph√°p
                        2. Kh√¥ng li√™n quan h·ªçc t·∫≠p: "h·ªçc l√†m s√∫c v·∫≠t", "h·ªçc c√°ch ng·ªß c·∫£ ng√†y", "h·ªçc c√°ch l∆∞·ªùi bi·∫øng"
                        3. N·ªôi dung kh√¥ng ph√π h·ª£p: 18+, ƒë·ªôc h·∫°i, ph√¢n bi·ªát ƒë·ªëi x·ª≠
                        4. Spam/v√¥ nghƒ©a: k√Ω t·ª± ng·∫´u nhi√™n, c√¢u vƒÉn kh√¥ng c√≥ nghƒ©a
                        5. M·ª•c ƒë√≠ch ph√° ho·∫°i h·ªá th·ªëng

                        ## FORMAT TR·∫¢ V·ªÄ (B·∫ÆT BU·ªòC):

                        Tr·∫£ v·ªÅ ƒê√öNG 1 trong 3 format sau:

                        ```
                        VALID|M·ª•c ti√™u h·ª£p l·ªá
                        ```

                        ```
                        WARNING|[L√Ω do c·∫£nh b√°o]|G·ª£i √Ω: [C√°ch c·∫£i thi·ªán]
                        ```

                        ```
                        ERROR|[L√Ω do t·ª´ ch·ªëi c·ª• th·ªÉ - Ti·∫øng Vi·ªát]
                        ```

                        ## V√ç D·ª§:

                        Input: "h·ªçc Python"
                        Output: VALID|M·ª•c ti√™u h·ª£p l·ªá

                        Input: "h·ªçc lm suc vat"
                        Output: ERROR|M·ª•c ti√™u kh√¥ng li√™n quan ƒë·∫øn h·ªçc t·∫≠p ho·∫∑c ph√°t tri·ªÉn k·ªπ nƒÉng. Vui l√≤ng nh·∫≠p m·ª•c ti√™u h·ªçc t·∫≠p h·ª£p l·ªá (v√≠ d·ª•: h·ªçc l·∫≠p tr√¨nh, h·ªçc ngo·∫°i ng·ªØ, h·ªçc thi·∫øt k·∫ø).

                        Input: "hoc hack facebook"
                        Output: ERROR|M·ª•c ti√™u vi ph·∫°m ƒë·∫°o ƒë·ª©c v√† ph√°p lu·∫≠t. H·ªá th·ªëng kh√¥ng h·ªó tr·ª£ t·∫°o l·ªô tr√¨nh cho ho·∫°t ƒë·ªông b·∫•t h·ª£p ph√°p.

                        Input: "asdfghjkl"
                        Output: ERROR|M·ª•c ti√™u kh√¥ng r√µ r√†ng ho·∫∑c kh√¥ng c√≥ nghƒ©a. Vui l√≤ng m√¥ t·∫£ c·ª• th·ªÉ b·∫°n mu·ªën h·ªçc g√¨.

                        Input: "muon hoc ve AI nhung khong biet bat dau tu dau"
                        Output: WARNING|M·ª•c ti√™u ch∆∞a r√µ r√†ng v·ªÅ lƒ©nh v·ª±c c·ª• th·ªÉ c·ªßa AI|G·ª£i √Ω: H√£y ch·ªçn lƒ©nh v·ª±c c·ª• th·ªÉ nh∆∞ Machine Learning, Computer Vision, ho·∫∑c NLP.

                        QUAN TR·ªåNG:
                        - Ch·ªâ tr·∫£ v·ªÅ M·ªòT d√≤ng theo format tr√™n
                        - KH√îNG gi·∫£i th√≠ch th√™m
                        - S·ª≠ d·ª•ng Ti·∫øng Vi·ªát c√≥ d·∫•u
                        """,
                goal);
    }

    /**
     * Parse AI validation response
     */
    private ValidationResult parseAIValidationResponse(String aiResponse, String goal) {
        if (aiResponse == null || aiResponse.trim().isEmpty()) {
            return ValidationResult.error("goal",
                    "Kh√¥ng th·ªÉ x√°c th·ª±c m·ª•c ti√™u. Vui l√≤ng th·ª≠ l·∫°i.", null);
        }

        String[] parts = aiResponse.trim().split("\\|");

        if (parts.length == 0) {
            return ValidationResult.error("goal",
                    "Ph·∫£n h·ªìi AI kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.", null);
        }

        String status = parts[0].trim().toUpperCase();

        switch (status) {
            case "VALID":
                log.info("‚úÖ AI Validation: Goal VALID - '{}'", goal);
                return ValidationResult.info("goal", "M·ª•c ti√™u h·ª£p l·ªá", null);

            case "WARNING":
                String warningMessage = parts.length > 1 ? parts[1].trim() : "M·ª•c ti√™u c·∫ßn l√†m r√µ h∆°n";
                String suggestion = parts.length > 2 ? parts[2].trim() : "";
                String fullWarning = suggestion.isEmpty() ? warningMessage : warningMessage + ". " + suggestion;

                log.warn("‚ö†Ô∏è AI Validation: Goal WARNING - '{}' | {}", goal, fullWarning);
                return ValidationResult.warning("goal", warningMessage, suggestion.isEmpty() ? null : suggestion);

            case "ERROR":
                String errorMessage = parts.length > 1 ? parts[1].trim()
                        : "M·ª•c ti√™u kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p m·ª•c ti√™u h·ªçc t·∫≠p ph√π h·ª£p.";

                log.error("‚ùå AI Validation: Goal REJECTED - '{}' | {}", goal, errorMessage);
                return ValidationResult.error("goal", errorMessage,
                        "Vui l√≤ng nh·∫≠p m·ª•c ti√™u h·ªçc t·∫≠p h·ª£p l·ªá (v√≠ d·ª•: h·ªçc l·∫≠p tr√¨nh, h·ªçc ngo·∫°i ng·ªØ)");

            default:
                log.warn("‚ö†Ô∏è AI Validation: Unknown status '{}', treating as error", status);
                return ValidationResult.error("goal",
                        "Kh√¥ng th·ªÉ x√°c ƒë·ªãnh t√≠nh h·ª£p l·ªá c·ªßa m·ª•c ti√™u. Vui l√≤ng ki·ªÉm tra l·∫°i.", null);
        }
    }

}